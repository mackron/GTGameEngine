
--- GTGameEngine Sandbox ---

The GTGameEngine Sandbox is basically just the editor for my hobby game engine
I've been working on. It's primary use is to allow you to play around with the
editor and try it out. It's also my way of showing off some of the engine's
features in a way that's fairly easy for the average person.

At the moment, the sandbox is extremely basic. In fact, it's not really a
sandbox at all yet because there's isn't really all that much you can do. A lot
of the engine is not yet exposed through the editor.

Here's what you can do (spoiler: it's not much):
    - Create and edit basic scenes
    - Play around with very basic physics (Use the "Physics" button at the top)
        - Lots of physics properties have not yet have a front-end GUI
        - Add and remove collision shapes
        - Play around with the mass
    - View models and edit it's basic properties.
    - View textures.
    - Edit text files (XML files are currently incorrectly detected as models)

    
    
--- Requirements ---

64-bit CPU and OS (Windows XP - 7. Windows 8 should work fine, but not tested.)
OpenGL 2.0 support.

I should note that the engine itself can be built as a 32-bit binary, but I
probably won't ever distribute a 32-bit build of the sandbox.

For the GPU, the engine does not use anything more than OpenGL 2.0, but it has
not been heavily tested, so you may in fact need something a bit better in the
event that I'm using an extension I've forgotten about off the top of my head.
I've tested on nVidia and AMD GPU's, so they should work fine. It was working
on my Sandy Bridge GPU at one point a while ago, so it might also work there.

Let me know if it doesn't work since it'll probably be a bug on my end.



--- Usage ---

There is a single global editor which can be thought of as a container for the
other editors.

Assets are stored in the 'data' directory (more can be added by looking at the
config.lua file). The editor displays the files in this directory in the panel
on the left. You just double click an asset you want to open and the editor
will try and open it into it's own tab.

Asset files will automatically be displayed in the explorer on the left.

You will notice the "var" directory in the explorer. This is an created by the
engine for storing files that change, such as logs and caches.

Models should use Collada files (.dae). The engine will automatically convert
.dae files to it's own, more efficient format. This is all handled in the
background by the engine, so all you need to care about as the user is the
original .dae file.


--- The Scene Editor ---

To create a new scene, right click on the folder where you would like to create
it and hit "New Scene...". Don't include the extension in the name.

The default view is looking down -Z. Right click in the main viewport to add
pre-defined scene nodes. Scene nodes are component based (very similar to the
way Unity does things).

To change the properties of a scene node (including adding and removing
components), you just select a single scene node which will show the properties
panel on the left. You should be able to figure out how that works. You can't
currently modify more than one scene node at once, and there is not yet any
support for Unity-style prefabs (they're coming!).

There is currently no support for attaching scripts to scene nodes, but this is
the next major milestone for the editting tools. Currently, the only way to do
behaviour is through the C++ environment, which is a bit of a pain, especially
for simple prototype games.

There is also currently no notion of "running" the game. Again, you currently
need to use the C++ library to do this kind of stuff.

You can play around with the physics by hitting the "Physics" button along the
top. This is a simple toggle. The main motivation behind this feature is to
make testing physics a lot easier.

You can translate, rotate and scale physics objects as the physics simulation
is running.

On the subject of physics, there is currently no way of adding and removing
constraints via the editor. This is supported by the engine, but I've not yet
implemented a front-end for the editor.

The undo/redo stack of a scene is persistant, which basically means you can do
undo/redo operations between loads.


Controls:

    LMB:              Select
    Shift + LMB:      Select multiple

    LMB + Drag:       Move camera forward and turn.
    RMB + Drag:       Rotate camera
    LMB + RMB + Drag: Pan
    

    - Translate Mode           - T
    - Rotate Mode              - R
    - Scale Mode               - S
    - Local Space Mode         - L
    - World Space Mode         - G
    - Toggle Local/World Space - Q
    - Duplicate                - CTRL + D
    - Delete Selected Nodes    - Delete



--- Source Code ---

The engine is 100% free and open-source. It is hosted on GitHub at:

    

The source is released under the MIT licence which basically means you can do
whatever you want with it, so long as you don't blame me if anything goes
wrong.

I should note, though, that everything is still fairly early in development, so
you should definately not use this for anything serious. In particular, the
serialized format of many objects are constantly changing and I'm not yet
concerning myself with backwards compatibility. 




-

David Reid (mackron@gmail.com)















