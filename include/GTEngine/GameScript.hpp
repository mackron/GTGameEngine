
#ifndef __GTEngine_GameScript_hpp_
#define __GTEngine_GameScript_hpp_

#include <GTCore/Script.hpp>
#include <GTCore/String.hpp>

namespace GTEngine
{
    class Game;

    /// Class representing the scripting environment of a game.
    ///
    /// This class is actually a GTCore::Script object, but with additional stuff to make it suitable for use by a game.
    ///
    /// Anything involving a script is done through this, including configuration.
    ///
    /// The commands sent to the engine are actually just Lua scripts which are executed through the scripting environment.
    class GameScript : public GTCore::Script
    {
    public:

        /// Constructor.
        GameScript(Game &game);

        /// Destructor.
        ~GameScript();


        /// GTCore::Script::Load().
        ///
        /// This is a special implementation that keeps track of the last error message in a proper variable.
        bool Load(const char* script);

        /// GTCore::Script::Execute().
        ///
        /// This is a special implementation that keeps track of the last error message in a proper variable.
        bool Execute();
        bool Execute(const char* script) { return GTCore::Script::Execute(script); }


        /// Retrieves a reference to the game object that owns this environment.
              Game & GetGame()       { return this->game; }
        const Game & GetGame() const { return this->game; }


        /// Retrieves a string containing the last error message for a failed script.
        const char* GetLastError() { return this->lastError.c_str(); }



        /////////////////////////////////////////////
        // Public FFI functions.

        struct FFI
        {
            /// A helper for retrieving the Game instance from the script.
            static Game & GetGameObject(GTCore::Script &script);
        };


    private:

        /// Private function for registering the foreign-function interface.
        bool RegisterFFI();


    private:

        /// A reference to the game that owns this environment.
        Game &game;

        /// The last error message generated by a call to execute.
        GTCore::String lastError;
    };
}

#endif