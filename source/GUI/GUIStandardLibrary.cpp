// Copyright (C) 2011 - 2014 David Reid. See included LICENCE file.

#include <GTGE/GUI/GUIStandardLibrary.hpp>

namespace GT
{
    bool GUIStandardLibrary::Load(GUIServer &server)
    {
        bool result = true;

        result = result && GUIStandardLibrary::LoadMisc(server);
        result = result && GUIStandardLibrary::LoadImages(server);

        result = result && GUIStandardLibrary::LoadButton(server);
        result = result && GUIStandardLibrary::LoadTextBox(server);
        result = result && GUIStandardLibrary::LoadCheckBox(server);
        result = result && GUIStandardLibrary::LoadLabeledSpinner(server);
        result = result && GUIStandardLibrary::LoadTreeView(server);
        result = result && GUIStandardLibrary::LoadScrollbars(server);
        result = result && GUIStandardLibrary::LoadTooltips(server);

        return result;
    }


    bool GUIStandardLibrary::LoadMisc(GUIServer &server)
    {
        bool result = true;

        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "var std-bg-color-dark                   : #333;"
            "var std-bg-color-mid                    : #888;"
            "var std-bg-color-light                  : #ccc;"

            "var std-font-family                     : liberation sans;"
            "var std-font-size                       : 9pt;"
            "var std-text-color                      : #aaa;"
            "var std-text-selection-bg-color         : #6a6a6a;"
            "var std-text-selection-bg-color-blurred : #555555;"

            "var std-control-bg-color-dark           : #444;"
            "var std-control-bg-color-mid            : #555;"
            "var std-control-bg-color-light          : #666;"

            "var std-control-border                  : 1px #6a6a6a;"
        );

        // Scripts.
        /*
        result = result && server.ExecuteScript
        (
            ""
        );
        */

        return result;
    }


    ////////////////////////////////////////////////
    // Button
    bool GUIStandardLibrary::LoadButton(GUIServer &server)
    {
        bool result = true;

        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "button"
            "{"
            "    background-color: std-control-bg-color-dark;"
            "    border:           std-control-border;"
            "    width:            auto;"
            "    height:           auto;"
            "    padding:          4px;"
            "    horizontal-align: center;"
            "    vertical-align:   center;"
            "    font-style:       bold;"
            "    text-color:       std-text-color;"
            "}"

            "button:hovered"
            "{"
            "    background-color: #555;"
            "}"
    
            "button:pushed"
            "{"
            "    background-color: #666;"
            "}"

            "button:disabled"
            "{"
            "    border-color: #595959;"
            "    text-color:   #666;"
            "}"
        );

        // Scripts.
        result = result && server.ExecuteScript
        (
            "function GTGUI.Element:Button(text)"
            "    self:SetText(text);"
            ""
            "    return self;"
            "end;"
        );

        return result;
    }


    ////////////////////////////////////////////////
    // TextBox and MultiLineTextBox
    bool GUIStandardLibrary::LoadTextBox(GUIServer &server)
    {
        bool result = true;

        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "textbox"
            "{"
            "    background-color:                        std-control-bg-color-dark;"
            "    border:                                  std-control-border;"
            "    width:                                   100%;"
            "    height:                                  auto;"
            "    padding:                                 2px 2px;"
            "    horizontal-align:                        left;"
            "    vertical-align:                          center;"
            "    text-color:                              std-text-color;"
            "    text-selection-background-color:         std-text-selection-bg-color;"
            "    text-selection-background-color-blurred: std-text-selection-bg-color-blurred;"
            "    editable-text:                           true;"
            "    cursor:                                  beam;"
            "    text-cursor-color:                       #999;"
            "    single-line-text:                        true;"
            "}"
            
            "textbox:focused"
            "{"
            "}"

            "textbox:disabled"
            "{"
            "    background-color: #3a3a3a;"
            "    border-color:     #4d4d4d;"
            "    text-color:       #666;"
            "}"


            "multiline-textbox"
            "{"
            "    flex-child-height: true;"
            "}"

            "multiline-textbox-textarea"
            "{"
            "    background-color:                        std-control-bg-color-dark;"
            "    width:                                   100%;"
            "    height:                                  100%;"
            "    padding:                                 2px 2px;"
            "    horizontal-align:                        left;"
            "    vertical-align:                          top;"
            "    text-color:                              std-text-color;"
            "    text-selection-background-color:         std-text-selection-bg-color;"
            "    text-selection-background-color-blurred: std-text-selection-bg-color-blurred;"
            "    editable-text:                           true;"
            "    single-line-text:                        false;"
            "    cursor:                                  beam;"
            "    text-cursor-color:                       #999;"
            "}"
        );
        
        // Scripts.
        result = result && server.ExecuteScript
        (
            "function GTGUI.Element:MultiLineTextBox()"
            "    self.TopContainer    = GTGUI.Server.New(\"<div parentid='\" .. self:GetID()                 .. \"' style='width:100%; height:100%; flex-child-width:true; child-plane:horizontal; font-family:inherit; font-size:inherit; text-color:inherit;' /> \");"
            "    self.BottomContainer = GTGUI.Server.New(\"<div parentid='\" .. self:GetID()                 .. \"' style='width:100%; height:auto; flex-child-width:true; child-plane:horizontal;' /> \");"
            "    self.TextArea        = GTGUI.Server.New(\"<div parentid='\" .. self.TopContainer:GetID()    .. \"' styleclass='multiline-textbox-textarea' style='font-family:inherit; font-size:inherit;' /> \");"
            "    self.VertScrollbar   = GTGUI.Server.New(\"<div parentid='\" .. self.TopContainer:GetID()    .. \"' styleclass='vertical-scrollbar' /> \");"
            "    self.HorzScrollbar   = GTGUI.Server.New(\"<div parentid='\" .. self.BottomContainer:GetID() .. \"' styleclass='horizontal-scrollbar' /> \");"
            "    self.ScrollbarCorner = GTGUI.Server.New(\"<div parentid='\" .. self.BottomContainer:GetID() .. \"' style='width:std-scrollbar-width; height:100%;' /> \");"
            ""
            "    self.mouseWheelScrollSpeed = 3;"                                       // <-- The number of lines to scroll for each mouse wheel tick.
            ""
            "    self.VertScrollbar:VerticalScrollbar();"
            "    self.HorzScrollbar:HorizontalScrollbar();"
            ""
            "    function self:SetText(text)"
            "        self.TextArea:SetText(text);"
            "    end;"
            ""
            "    function self:UpdateScrollbars()"
            "        self:UpdateVerticalScrollbar();"
            "        self:UpdateHorizontalScrollbar();"
            "    end;"
            ""
            "    function self:UpdateVerticalScrollbar()"
            "        local lineCount     = self.TextArea:GetTextLineCount();"
            "        local pageLineCount = self.TextArea:GetTextPageLineCount();"
            "        local lineHeight    = self.TextArea:GetTextLineHeight();"
            "        local textYOffset   = self.TextArea:GetInnerYOffset();"
            ""
            "        self.VertScrollbar:SetRange(lineCount + pageLineCount - 1, true);"       // <-- We add a whole page to allow us to scroll down a bit further and not have to edit text all the way down the bottom of the screen.
            "        self.VertScrollbar:SetPageSize(pageLineCount, true);"
            ""
            "        if lineHeight > 0 then"
            "            self.VertScrollbar:SetScrollPosition(-textYOffset / lineHeight);"
            "        else"
            "            self.VertScrollbar:SetScrollPosition(0);"
            "        end"
            "    end;"
            ""
            "    function self:UpdateHorizontalScrollbar()"
            "        local textWidth          = self.TextArea:GetTextWidth();"
            "        local textAreaInnerWidth = self.TextArea:GetInnerWidth();"
            "        local textXOffset        = self.TextArea:GetInnerXOffset();"
            ""
            "        self.HorzScrollbar:SetRange(textWidth + textAreaInnerWidth, true);"
            "        self.HorzScrollbar:SetPageSize(textAreaInnerWidth, true);"
            ""
            "        self.HorzScrollbar:SetScrollPosition(-textXOffset, false);"
            "    end;"
            ""
            "    function self:GoToLine(lineNumber)"
            "        self.TextArea:Focus();"
            "        self.TextArea:GoToLine(lineNumber);"
            "        self.VertScrollbar:SetScrollPosition(lineNumber - (self.TextArea:GetTextPageLineCount() / 2));"
            "    end;"
            ""
            ""
            "    self.VertScrollbar:OnScroll(function(data)"
            "        self.TextArea:SetStyle('inner-offset-y', tostring(-data.position * self.TextArea:GetTextLineHeight()));"
            "    end);"
            ""
            "    self.HorzScrollbar:OnScroll(function(data)"
            "        if self.TextArea:GetInnerXOffset() ~= -data.position then"
            "            self.TextArea:SetStyle('inner-offset-x', tostring(-data.position));"
            "        end;"
            "    end);"
            ""
            ""
            "    self.TextArea:OnTextChanged(function()"
            "        self:UpdateScrollbars();"
            "    end);"
            ""
            "    self.TextArea:OnSize(function()"
            "        if self.TextArea:IsVisible() then"
            "            self:UpdateScrollbars();"
            "        end"
            "    end);"
            ""
            "    self.TextArea:OnInnerXOffsetChanged(function()"
            "        self:UpdateHorizontalScrollbar();"
            "    end);"
            ""
            "    self.TextArea:OnInnerYOffsetChanged(function()"
            "        self:UpdateVerticalScrollbar();"
            "    end);"
            ""
            ""
            "    self:OnMouseEnter(function()"
            "        self.isMouseOver = true;"
            "    end);"
            ""
            "    self:OnMouseLeave(function()"
            "        self.isMouseOver = false;"
            "    end);"
            ""
            ""
            "    self:WatchMouseWheel(function(data)"
            "        if self.isMouseOver then"
            "            self.VertScrollbar:Scroll(-data.delta * self.mouseWheelScrollSpeed);"
            "        end;"
            "    end);"
            ""
            "    return self;"
            "end;"
        );

        return result;
    }



    ////////////////////////////////////////////////
    // CheckBox
    bool GUIStandardLibrary::LoadCheckBox(GUIServer &server)
    {
        bool result = true;

        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "checkbox"
            "{"
            "    width:          auto;"
            "    height:         auto;"
            "    child-plane:    horizontal;"
            "    text-color:     std-text-color;"
            "    vertical-align: center;"
            "}"

            "checkbox-square"
            "{"
            "    width:                   16px;"
            "    height:                  16px;"
            "    vertical-align:          center;"
            "    horizontal-align:        center;"
            "    background-color:        std-control-bg-color-dark;"
            "    border:                  std-control-border;"
            "    transparent-mouse-input: true;"
            "}"

            "checkbox-square-hovered"
            "{"
            "    background-color: std-control-bg-color-mid;"
            "}"

            "checkbox-inner-square"
            "{"
            "    visible:                 false;"
            "    width:                   10px;"
            "    height:                  10px;"
            "    background-color:        #363;"
            "    border:                  std-control-border;"
            "    transparent-mouse-input: true;"
            "}"

            "checkbox-text"
            "{"
            "    margin-left:             4px;"
            "    width:                   auto;"
            "    height:                  auto;"
            "    transparent-mouse-input: true;"
            "}"
        );

        // Scripts.
        result = result && server.ExecuteScript
        (
            "function GTGUI.Element:CheckBox(text)"
            "    self.square      = GTGUI.Server.New(\"<div parentid='\" .. self:GetID()        .. \"' styleclass='checkbox-square' /> \");"
            "    self.innerSquare = GTGUI.Server.New(\"<div parentid='\" .. self.square:GetID() .. \"' styleclass='checkbox-inner-square' /> \");"
            "    self.text        = GTGUI.Server.New(\"<div parentid='\" .. self:GetID()        .. \"' styleclass='checkbox-text' /> \");"
            "    self.checked     = false;"
            ""
            "    if text ~= nil then"
            "        self.text:SetText(text);"
            "    end;"
            ""
            ""
            "    self:OnMouseEnter(function()"
            "        self.square:AttachStyleClass('checkbox-square-hovered');"
            "    end);"
            ""
            "    self:OnMouseLeave(function()"
            "        self.square:DetachStyleClass('checkbox-square-hovered');"
            "    end);"
            ""
            "    self:OnPressed(function()"
            "        self:Toggle();"
            "    end);"
            ""
            ""
            "    function self:IsChecked()"
            "        return self.checked;"
            "    end;"
            ""
            "    function self:Check(blockEvent)"
            "        if not self:IsChecked() then"
            "            self.checked = true;"
            "            self.innerSquare:Show();"
            "            if not blockEvent then self:OnChecked() end;"
            "        end;"
            "    end;"
            ""
            "    function self:Uncheck(blockEvent)"
            "        if self:IsChecked() then"
            "            self.checked = false;"
            "            self.innerSquare:Hide();"
            "            if not blockEvent then self:OnUnchecked() end;"
            "        end;"
            "    end;"
            ""
            "    function self:Toggle(blockEvent)"
            "        if self:IsChecked() then"
            "            self:Uncheck(blockEvent);"
            "        else"
            "            self:Check(blockEvent);"
            "        end;"
            "    end;"
            ""
            "    function self:SetChecked(checked, blockEvent)"
            "        if checked then"
            "            self:Check(blockEvent);"
            "        else"
            "            self:Uncheck(blockEvent);"
            "        end;"
            "    end;"
            ""
            ""
            "    function self:OnChecked(callback)"
            "        if callback then"
            "            self:BindEvent('OnChecked', callback);"
            "        else"
            "            self:CallEvent('OnChecked');"
            "        end;"
            "    end;"
            ""
            "    function self:OnUnchecked(callback)"
            "        if callback then"
            "            self:BindEvent('OnUnchecked', callback);"
            "        else"
            "            self:CallEvent('OnUnchecked');"
            "        end;"
            "    end;"
            ""
            "    return self;"
            "end;"
        );

        return result;
    }


    ////////////////////////////////////////////////
    // LabeledSpinner
    bool GUIStandardLibrary::LoadLabeledSpinner(GUIServer &server)
    {
        bool result = true;

        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "labeled-spinner"
            "{"
            "    height:           24px;"
            "    border:           std-control-border;"
            "    child-plane:      horizontal;"
            "    vertical-align:   center;"
            "    flex-child-width: true;"
            "}"


            "labeled-spinner-arrow"
            "{"
            "    height:                 100%;"
            "    width:                  16px;"
            "    background-image-color: #999;"
            "}"

            "labeled-spinner-arrow:hovered"
            "{"
            "    background-image-color: #ccc;"
            "}"

            "labeled-spinner-arrow:pushed"
            "{"
            "    background-image-color: #fff;"
            "}"

            "labeled-spinner-arrow-left includes labeled-spinner-arrow"
            "{"
            "    background-image: std-arrow-left;"
            "    border-right:     1px #444;"
            "}"

            "labeled-spinner-arrow-right includes labeled-spinner-arrow"
            "{"
            "    background-image: std-arrow-right;"
            "    border-left:      1px #444;"
            "}"


            "labeled-spinner-label"
            "{"
            "    width:        70%;"
            "    text-color:   std-text-color;"
            "    padding-left: 4px;"
            "}"

            "labeled-spinner-tb"
            "{"
            "    width:                                   25%;"
            "    height:                                  100%;"
            "    padding:                                 2px 0px;"
            "    background-color:                        none;"
            "    border:                                  none;"
            "    border-left:                             1px #444;"
            "    horizontal-align:                        center;"
            "    vertical-align:                          center;"
            "    editable-text:                           true;"
            "    text-cursor-color:                       std-text-color;"
            "    text-color:                              std-text-color;"
            "    text-selection-background-color:         std-text-selection-bg-color;"
            "    text-selection-background-color-blurred: std-text-selection-bg-color-blurred;"
            "    single-line-text:                        true;"
            "    cursor:                                  beam;"
            "}"
        );


        // Scripts.
        result = result && server.ExecuteScript
        (
            "function GTGUI.Element:LabeledSpinner(text, min, max, step, defaultValue)"
            "    self.leftArrow  = GTGUI.Server.New(\"<div parentid='\" .. self:GetID() .. \"' styleclass='labeled-spinner-arrow-left' />\");"
            "    self.label      = GTGUI.Server.New(\"<div parentid='\" .. self:GetID() .. \"' styleclass='labeled-spinner-label'>\" .. text .. \"</div>\");"
            "    self.textbox    = GTGUI.Server.New(\"<div parentid='\" .. self:GetID() .. \"' styleclass='labeled-spinner-tb' />\");"
            "    self.rightArrow = GTGUI.Server.New(\"<div parentid='\" .. self:GetID() .. \"' styleclass='labeled-spinner-arrow-right' />\");"
            ""
            "    self.min   = min;"
            "    self.max   = max;"
            "    self.step  = step;"
            "    self.value = defaultValue;"
            ""
            ""
            "    self.leftArrow:OnPressed(function()"
            "        self:Decrement();"
            "    end);"
            ""
            "    self.rightArrow:OnPressed(function()"
            "        self:Increment();"
            "    end);"
            ""
            "    self.textbox:OnKeyDown(function(data)"
            "        if data.key == 13 then"
            "            self:SetValue(tonumber(self.textbox:GetText()));"
            "        end;"
            "    end);"
            ""
            "    self.textbox:OnFocus(function()"
            "    end);"
            ""
            "    self.textbox:OnBlur(function()"
            "        self:SetValue(tonumber(self.textbox:GetText()));"
            "    end);"
            ""
            ""
            "    function self:UpdateTextBox()"
            "        self.textbox:SetText(string.format('%.4g', self.value));"
            "    end;"
            ""
            ""
            "    function self:GetMin()"
            "        return self.min;"
            "    end;"
            ""
            "    function self:SetMin(min)"
            "        self.min = min;"
            "        self:ClampValue();"
            "    end;"
            ""
            "    function self:GetMax()"
            "        return self.max;"
            "    end;"
            ""
            "    function self:SetMax(max)"
            "        self.max = max;"
            "        self:ClampValue();"
            "    end;"
            ""
            ""
            "    function self:GetStep()"
            "        return self.step;"
            "    end;"
            ""
            "    function self:SetStep(step)"
            "        self.step = step;"
            "    end;"
            ""
            ""
            "    function self:GetValue()"
            "        return self.value;"
            "    end;"
            ""
            "    function self:SetValue(value)"
            "        local oldvalue = self.value;"
            "        self.value = value;"
            ""
            "        self:ClampValue();"
            ""
            "        if oldvalue ~= self.value then"
            "            self:OnValueChanged();"
            "        end;"
            "    end;"
            ""
            ""
            "    function self:Increment(amount)"
            "        local newvalue;"
            ""
            "        if amount ~= nil then"
            "            newvalue = self.value + amount;"
            "        else"
            "            newvalue = self.value + self.step;"
            "        end;"
            ""
            "        self:SetValue(newvalue);"
            "    end;"
            ""
            "    function self:Decrement(amount)"
            "        local newvalue;"
            ""
            "        if amount ~= nil then"
            "            newvalue = self.value - amount;"
            "        else"
            "            newvalue = self.value - self.step;"
            "        end;"
            ""
            "        self:SetValue(newvalue);"
            "    end;"
            ""
            ""
            "    function self:ClampValue()"
            "        if self.value > self.max then self.value = self.max; end;"
            "        if self.value < self.min then self.value = self.min; end;"
            ""
            "        self:UpdateTextBox();"
            "    end;"
            ""
            ""
            "    function self:OnValueChanged(callback)"
            "        if callback then"
            "            self:BindEvent('OnValueChanged', callback);"
            "        else"
            "            self:CallEvent('OnValueChanged');"
            "        end;"
            "    end;"
            ""
            "    self:UpdateTextBox();"
            "end;"
        );


        return result;
    }


    ////////////////////////////////////////////////
    // TreeView
    bool GUIStandardLibrary::LoadTreeView(GUIServer &server)
    {
        bool result = true;


        //////////////////////////////////
        // TreeViewItem
        
        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "treeview-item"
            "{"
            "    width:     auto;"
            "    min-width: 100%;"
            "    height:    auto;"
            "}"


            "treeview-item-title-container"
            "{"
            "    width:          auto;"
            "    min-width:      100%;"
            "    child-plane:    horizontal;"
            "    vertical-align: center;"
            "    padding:        0px 2px;"
            "    height:         18px;"
            "}"

            "treeview-item-title-container:hovered"
            "{"
            "    background-color: std-control-bg-color-mid;"
            "}"

            "treeview-item-title-container-selected"
            "{"
            "    background-color: std-control-bg-color-light;"
            "    text-color:       #bbb;"
            "}"

            "treeview-item-title-container-selected:hovered"
            "{"
            "    background-color: std-control-bg-color-light;"
            "}"


            "treeview-item-child-container"
            "{"
            "    visible:     false;"
            "    width:       auto;"
            "    min-width:   100%;"
            "    child-plane: vertical;"
            "}"

            "treeview-item-arrow"
            "{"
            "    width:                  10px;"
            "    height:                 10px;"
            "    margin:                 2px 0px;"
            "    background-image:       none;"
            "    background-image-color: #999;"
            "}"

            "treeview-item-arrow : hovered"
            "{"
            "    background-image-color: #ccc;"
            "}"


            "treeview-item-icon"
            "{"
            "    visible:                 false;"
            "    width:                   16px;"
            "    height:                  16px;"
            "    transparent-mouse-input: true;"
            "    margin-right:            2px;"
            "}"

            "treeview-item-text"
            "{"
            "    width:                   auto;"
            "    transparent-mouse-input: true;"
            "}"
        );

        // Scripts.
        result = result && server.ExecuteScript
        (
            "function GTGUI.Element:TreeViewItem(text, ownerTreeView)"
            "    self.titleContainer = GTGUI.Server.New(\"<div parentid='\" .. self:GetID()                .. \"' styleclass='treeview-item-title-container'  />\");"
            "    self.childContainer = GTGUI.Server.New(\"<div parentid='\" .. self:GetID()                .. \"' styleclass='treeview-item-child-container'  />\");"
            "    self.arrow          = GTGUI.Server.New(\"<div parentid='\" .. self.titleContainer:GetID() .. \"' styleclass='treeview-item-arrow'            />\");"
            "    self.icon           = GTGUI.Server.New(\"<div parentid='\" .. self.titleContainer:GetID() .. \"' styleclass='treeview-item-icon'             />\");"
            "    self.text           = GTGUI.Server.New(\"<div parentid='\" .. self.titleContainer:GetID() .. \"' styleclass='treeview-item-text'             />\");"
            ""
            "    self.ownerTreeView         = ownerTreeView;"
            "    self.parentItem            = nil;"
            "    self.childItems            = {};"
            "    self.isRoot                = false;"
            "    self.isSelected            = false;"
            "    self.showHideOnDoubleClick = true;"
            ""
            ""
            "    self.arrow:OnPush(function()"
            "        if self:IsCollapsed() then self:Expand() else self:Collapse() end;"
            "    end);"
            ""
            "    self.titleContainer:OnPush(function()"
            "        if not self.ownerTreeView.allowMultiSelect or not GTGUI.Server.IsCTRLKeyDown() then"
            "            self.ownerTreeView:DeselectAllItemsExcept(self);"
            "        end"
            ""
            "        if self.isSelected and GTGUI.Server.IsCTRLKeyDown() then"
            "            self:Deselect();"
            "        else"
            "            self:Select();"
            "        end"
            "    end);"
            ""
            ""
            "    self.titleContainer:OnMouseButtonDoubleClick(function(data)"
            "        if data.button == GT.MouseButtons.Left then"
            "            if self.showHideOnDoubleClick and self.childContainer:GetChildCount() > 0 then"
            "                if self:IsCollapsed() then"
            "                    self:Expand();"
            "                else"
            "                    self:Collapse();"
            "                end;"
            "            end;"
            "            self:GetOwnerTreeView():OnItemPicked(self);"
            "        end;"
            "    end);"
            ""
            ""
            "    function self:SetText(text)"
            "        self.text:SetText(text);"
            "    end;"
            ""
            "    function self:GetText()"
            "        return self.text:GetText();"
            "    end;"
            ""
            ""
            "    function self:AppendChildItem(item)"
            "        if item.parentItem then"
            "            item.parentItem:RemoveChildItem(item);"
            "        end;"
            ""
            "        self.childContainer:AppendChild(item);"
            "        if not self.isRoot then self:ShowArrow(); end;"
            ""
            "        item.parentItem = self;"
            "        item:Reposition();"
            ""
            "        if not self:IsCollapsed() and self:GetOwnerTreeView() then self:GetOwnerTreeView():UpdateScrollbars() end;"
            "    end;"
            ""
            "    function self:RemoveChildItem(item)"
            "        GTGUI.Server.DeleteElement(item);"
            "        if self.childContainer:GetChildCount() == 0 and not self.isRoot then"
            "            self:HideArrow();"
            "            self.childContainer:Hide();"
            "        end;"
            "        if self:GetOwnerTreeView() then self:GetOwnerTreeView():UpdateScrollbars() end;"
            "    end;"
            ""
            "    function self:RemoveAllChildItems()"
            "        self.childContainer:DeleteAllChildren();"
            "        if not self.isRoot then"
            "            self:Collapse();"
            "            self:HideArrow();"
            "        end;"
            "    end;"
            ""
            ""
            "    function self:Expand()"
            "        if self.childContainer:GetChildCount() > 0 then"
            "            self.childContainer:Show();"
            "            self:ShowArrow();"
            "            if self:GetOwnerTreeView() then self:GetOwnerTreeView():UpdateScrollbars() end;"
            "        end;"
            "    end;"
            ""
            "    function self:Collapse()"
            "        self.childContainer:Hide();"
            "        self:ShowArrow();"
            "        if self:GetOwnerTreeView() then self:GetOwnerTreeView():UpdateScrollbars() end;"
            "    end;"
            ""
            "    function self:IsCollapsed()"
            "        return not self.childContainer:IsVisible();"
            "    end;"
            ""
            ""
            "    function self:ShowArrow()"
            "        if self.childContainer:IsVisible() then"
            "            self.arrow:SetStyle('background-image', 'std-arrow-down');"
            "        else"
            "            self.arrow:SetStyle('background-image', 'std-arrow-right');"
            "        end;"
            "    end;"
            ""
            "    function self:HideArrow()"
            "        self.arrow:SetStyle('background-image', 'none');"
            "    end;"
            ""
            ""
            "    function self:ShowIcon(image)"
            "        self.icon:SetStyle('background-image', image);"
            "        self.icon:Show();"
            "    end;"
            ""
            "    function self:HideIcon()"
            "        self.icon:Hide();"
            "    end;"
            ""
            ""
            "    function self:GetDepth()"
            "        if self.parentItem then"
            "            return self.parentItem:GetDepth() + 1;"
            "        end;"
            "        return 0;"
            "    end;"
            ""
            "    function self:GetSingleIndentOffset()"
            "        if self.ownerTreeView then return self.ownerTreeView:GetSingleIndentOffset() else return 10 end;"
            "    end;"
            ""
            "    function self:GetTotalIndentOffset()"
            "        return (self:GetDepth() - 1) * self:GetSingleIndentOffset();"                      // <-- subtract 1 to ignore the root item.
            "    end;"
            ""
            ""
            "    function self:Reposition(indentDistance)"       
            "        self.titleContainer:SetStyle('padding-left', tostring(self:GetTotalIndentOffset()));"
            "    end;"
            ""
            ""
            "    function self:GetOwnerTreeView()"
            "        if not self.ownerTreeView then"
            "            if self.parentItem then"
            "                self.ownerTreeView = self.parentItem:GetOwnerTreeView();"
            "            end;"
            "        end;"
            "        return self.ownerTreeView;"
            "    end;"
            ""
            "    function self:GetParent()"
            "        return self.parentItem;"
            "    end;"
            ""
            "    function self:GetChildren()"
            "        return self.childContainer.Children;"
            "    end;"
            ""
            ""
            "    function self:Select(blockEvent)"
            "        if not self.isSelected then"
            "            self.isSelected = true;"
            "            self.titleContainer:AttachStyleClass('treeview-item-title-container-selected')"
            "            if self:GetOwnerTreeView() then"
            "                self:GetOwnerTreeView():_DoSelection(self, blockEvent);"
            "            end;"
            "        end;"
            "    end;"
            ""
            "    function self:Deselect(blockEvent)"
            "        if self.isSelected then"
            "            self.isSelected = false;"
            "            self.titleContainer:DetachStyleClass('treeview-item-title-container-selected')"
            "            if self:GetOwnerTreeView() then"
            "                self:GetOwnerTreeView():_DoDeselection(self, blockEvent);"
            "            end;"
            "        end;"
            "    end;"
            ""
            "    function self:IsSelected()"
            "        return self.isSelected;"
            "    end;"
            ""
            ""
            "    function self:CountVisibleChildren(out)"
            "        if not self:IsCollapsed() then"
            "            out.count = out.count + self.childContainer:GetChildCount();"
            "            for key,value in pairs(self.childContainer.Children) do"
            "                value:CountVisibleChildren(out);"
            "            end;"
            "        end;"
            "    end;"
            ""
            ""
            "    function self:OnSelected(callback)"
            "        if callback then"
            "            self:BindEvent('OnSelected', callback);"
            "        else"
            "            self:CallEvent('OnSelected');"
            "        end;"
            "    end;"
            ""
            "    function self:OnDeselected(callback)"
            "        if callback then"
            "            self:BindEvent('OnDeselected', callback);"
            "        else"
            "            self:CallEvent('OnDeselected');"
            "        end;"
            "    end;"
            ""
            "    function self:OnPicked(callback)"
            "        if callback then"
            "            self:BindEvent('OnPicked', callback);"
            "        else"
            "            self:CallEvent('OnPicked');"
            "        end;"
            "    end;"
            ""
            ""
            "    self:SetText(text);"
            ""
            "    return self;"
            "end;"
        );



        //////////////////////////////////
        // TreeView

        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "treeview"
            "{"
            "    background-color:  std-control-bg-color-dark;"
            "    border:            std-control-border;"
            "    text-color:        std-text-color;"
            "    child-plane:       vertical;"
            "    flex-child-height: true;"
            "}"
        );

        // Scripts.
        result = result && server.ExecuteScript
        (
            "function GTGUI.Element:TreeView()"
            "    self.topContainer    = GTGUI.Server.New(\"<div parentid='\" .. self:GetID()                 .. \"' style='width:100%; height:100%; flex-child-width:true; child-plane:horizontal;' />\");"
            "    self.bottomContainer = GTGUI.Server.New(\"<div parentid='\" .. self:GetID()                 .. \"' style='width:100%; height:auto; flex-child-width:true; child-plane:horizontal;' />\");"
            "    self.body            = GTGUI.Server.New(\"<div parentid='\" .. self.topContainer:GetID()    .. \"' style='width:100%; height:auto;' />\");"
            "    self.vertScrollbar   = GTGUI.Server.New(\"<div parentid='\" .. self.topContainer:GetID()    .. \"' styleclass='vertical-scrollbar'   style='visible:false;' />\"):VerticalScrollbar();"
            "    self.horzScrollbar   = GTGUI.Server.New(\"<div parentid='\" .. self.bottomContainer:GetID() .. \"' styleclass='horizontal-scrollbar' style='visible:false;' />\"):HorizontalScrollbar();"
            "    self.scrollbarFiller = GTGUI.Server.New(\"<div parentid='\" .. self.bottomContainer:GetID() .. \"' style='width:std-scrollbar-width; height:100%;' />\");"
            ""
            "    self.rootTreeItem        = GTGUI.Server.New(\"<div parentid='\" .. self.body:GetID() .. \"' />\"):TreeViewItem('', self);"
            "    self.rootTreeItem.isRoot = true;"
            "    self.rootTreeItem.titleContainer:Hide();"
            "    self.rootTreeItem.childContainer:Show();"
            ""
            "    self.singleIndentOffset    = 10;"
            "    self.allowMultiSelect      = true;"
            "    self.selectedItems         = {};"
            "    self.itemHeight            = 18;"
            "    self.horizontalScrollStep  = 1;"
            "    self.xOffset               = 0;"
            "    self.isMouseWheelEnabled   = true;"
            "    self.isMouseOver           = false;"
            "    self.mouseWheelScrollSpeed = 3;"                                       // <-- The number of lines to scroll for each mouse wheel tick.
            ""
            ""
            "    self.vertScrollbar:OnScroll(function(data)"
            "        self.body:SetStyle('inner-offset-y', tostring(-data.position * self:GetItemHeight()));"
            "    end);"
            ""
            "    self.horzScrollbar:OnScroll(function(data)"
            "        self.xOffset = -data.position * self:GetHorizontalScrollStep();"
            "        self.rootTreeItem:SetStyle('inner-offset-x', tostring(self.xOffset));"
            "    end);"
            ""
            ""
            "    self.body:OnSize(function()"
            "        if self:IsVisible() then"
            "            self:UpdateScrollbars();"
            "        end;"
            "    end);"
            ""
            "    self.body:OnShow(function()"
            "        self:UpdateScrollbars();"
            "    end);"
            ""
            "    self.body:OnPush(function()"
            "        self:DeselectAllItems();"
            "    end);"
            ""
            ""
            "    self:OnSize(function()"
            "        if self:IsVisible() then"
            "            self:UpdateScrollbars();"
            "        end;"
            "    end);"
            ""
            "    self:OnMouseEnter(function()"
            "        self.isMouseOver = true;"
            "    end);"
            ""
            "    self:OnMouseLeave(function()"
            "        self.isMouseOver = false;"
            "    end);"
            ""
            "    self:WatchMouseWheel(function(data)"
            "        if self.isMouseOver and self.isMouseWheelEnabled then"
            "            self.vertScrollbar:Scroll(-data.delta * self.mouseWheelScrollSpeed);"
            "        end;"
            "    end);"
            ""
            ""
            "    function self:AddItem(text, parent)"
            "        local newitem = GTGUI.Server.New(\"<div parentid='\" .. self.body:GetID() .. \"' styleclass='treeview-item' />\"):TreeViewItem(text, self);"
            ""
            "        if parent then"
            "            parent:AppendChildItem(newitem);"
            "        else"
            "            self.rootTreeItem:AppendChildItem(newitem);"
            "        end;"
            ""
            "        return newitem;"
            "    end;"
            ""
            "    function self:RemoveItem(item, blockDeselectEvent)"
            "        if item ~= nil then"
            "            if item:IsSelected() then"
            "                item:Deselect(blockDeselectEvent);"
            "            end;"

            "            local parent = item:GetParent();"
            "            if parent then parent:RemoveChildItem(item) end;"
            "        end;"
            "    end;"
            ""
            "    function self:RemoveAllItems(blockDeselectEvent)"
            "        self:DeselectAllItems(blockDeselectEvent);"
            "        self.rootTreeItem:RemoveAllChildItems();"
            "    end;"
            ""
            ""
            "    function self:GetRootItem()"
            "        return self.rootTreeItem;"
            "    end;"
            ""
            "    function self:GetSingleIndentOffset()"
            "        return self.singleIndentOffset;"
            "    end;"
            ""
            ""
            "    function self:DeselectAllItemsExcept(itemToExclude, blockEvent)"
            "        local tempTable = {};"
            "        for key,value in pairs(self.selectedItems) do"
            "            tempTable[#tempTable + 1] = value;"
            "        end;"
            ""
            "        for i,value in ipairs(tempTable) do"
            "            if itemToExclude ~= value then"
            "                value:Deselect(blockEvent);"
            "            end;"
            "        end;"
            "    end;"
            ""
            "    function self:DeselectAllItems(blockEvent)"
            "        self:DeselectAllItemsExcept(nil, blockEvent);"
            "    end;"
            ""
            ""
            "    function self:GetSelectedItems()"
            "        return self.selectedItems;"
            "    end;"
            ""
            ""
            "    function self:UpdateScrollbars()"
            "        self:UpdateVerticalScrollbar();"
            "        self:UpdateHorizontalScrollbar();"
            "    end;"
            ""
            "    function self:UpdateVerticalScrollbar()"
            "        local visibleCount = self:GetVisibleItemCount();"
            "        local pageSize     = self:CalculatePageSize();"
            ""
            "        self.vertScrollbar:SetRange(visibleCount);"
            "        self.vertScrollbar:SetPageSize(pageSize);"
            ""
            "        if visibleCount > pageSize then"
            "            self.vertScrollbar:Show();"
            "            self.scrollbarFiller:Show();"
            "        else"
            "            self.vertScrollbar:Hide();"
            "            self.scrollbarFiller:Hide();"
            "        end;"
            "    end;"
            ""
            "    function self:UpdateHorizontalScrollbar()"
            "        local range    = self:GetWidestVisibleItemWidth() / self:GetHorizontalScrollStep();"
            "        local pageSize = self.body:GetInnerWidth()        / self:GetHorizontalScrollStep();"
            ""
            "        self.horzScrollbar:SetRange(range);"
            "        self.horzScrollbar:SetPageSize(pageSize);"
            ""
            "        if range > pageSize then"
            "            self.horzScrollbar:Show();"
            "        else"
            "            self.horzScrollbar:Hide();"
            "            self.scrollbarFiller:Hide();"
            "        end;"
            "    end;"
            ""
            ""
            "    function self:GetVisibleItemCount()"
            "        local result = { count = 0; };"
            "        self.rootTreeItem:CountVisibleChildren(result);"
            ""
            "        return result.count;"
            "    end;"
            ""
            "    function self:CalculatePageSize()"
            "        return math.floor(self:GetInnerHeight() / self:GetItemHeight());"
            "    end;"
            ""
            "    function self:GetWidestVisibleItemWidth()"
            "        return self.rootTreeItem.childContainer:GetWidth();"
            "    end;"
            ""
            ""
            "    function self:GetItemHeight()"
            "        return self.itemHeight;"
            "    end;"
            ""
            "    function self:SetItemHeight(itemHeight)"           // TODO: Update the height of every item and then update the scroll bars.
            "        self.itemHeight = itemHeight;"
            "    end;"
            ""
            ""
            "    function self:GetHorizontalScrollStep()"
            "        return self.horizontalScrollStep;"
            "    end;"
            ""
            "    function self:SetHorizontalScrollStep(step)"
            "        self.horizontalScrollStep = step;"
            "    end;"
            ""
            ""
            "    function self:EnableMouseWheel()"
            "        self.isMouseWheelEnabled = true;"
            "    end;"
            ""
            "    function self:DisableMouseWheel()"
            "        self.isMouseWheelEnabled = false;"
            "    end;"
            ""
            ""
            "    function self:EnableMultiSelect()"
            "        self.allowMultiSelect = true;"
            "    end;"
            ""
            "    function self:DisableMultiSelect()"
            "        self.allowMultiSelect = false;"
            "    end;"
            ""
            ""
            "    function self:_DoSelection(item, blockEvent)"
            "        if item then"
            "            self.selectedItems[item:GetID()] = item;"
            ""
            "            if not blockEvent then"
            "                self:OnItemSelected();"
            "                item:OnSelected();"
            "            end;"
            "        end;"
            "    end;"
            ""
            "    function self:_DoDeselection(item, blockEvent)"
            "        if item then"
            "            self.selectedItems[item:GetID()] = nil;"
            ""
            "            if not blockEvent then"
            "                self:OnItemDeselected();"
            "                item:OnDeselected();"
            "            end;"
            "        end;"
            "    end;"
            ""
            ""
            "    function self:OnItemSelected(callback)"
            "        if callback then"
            "            self:BindEvent('OnItemSelected', callback);"
            "        else"
            "            self:CallEvent('OnItemSelected');"
            "        end;"
            "    end;"
            ""
            "    function self:OnItemDeselected(callback)"
            "        if callback then"
            "            self:BindEvent('OnItemDeselected', callback);"
            "        else"
            "            self:CallEvent('OnItemDeselected');"
            "        end;"
            "    end;"
            ""
            "    function self:OnItemPicked(arg1)"
            "        if arg1 and type(arg1) == 'function' then"
            "            self:BindEvent('OnItemPicked', arg1);"
            "        else"
            "            self:CallEvent('OnItemPicked', { item = arg1; });"
            "            arg1:OnPicked();"
            "        end;"
            "    end;"
            ""
            "    return self;"
            "end;"
        );
        

        return result;
    }



    ////////////////////////////////////////////////
    // VerticalScrollbar, HorizontalScrollbar
    bool GUIStandardLibrary::LoadScrollbars(GUIServer &server)
    {
        bool result = true;

        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "var std-scrollbar-width:          14px;"
            "var std-scrollbar-thumb-border:   1px #3a3a3a;"
            "var std-scrollbar-thumb-min-size: 8px;"

            "scrollbar"
            "{"
            "    border:           1px #5a5a5a;"
            "    background-color: #5a5a5a;"
            "}"

            "vertical-scrollbar includes scrollbar"
            "{"
            "    width:  std-scrollbar-width;"
            "    height: 100%;"
            "}"

            "horizontal-scrollbar includes scrollbar"
            "{"
            "    width:  100%;"
            "    height: std-scrollbar-width;"
            "}"


            "scrollbar-thumb"
            "{"
            "    background-color:        #4c4c4c;"
            "    border:                  std-scrollbar-thumb-border;"
            "    allow-mouse-drag:        true;"
            "    mouse-drag-clamp-mode-x: border;"
            "    mouse-drag-clamp-mode-y: border;"
            "    positioning:             relative;"
            "}"

            "scrollbar-thumb-hovered"
            "{"
            "    background-color: #474747;"
            "}"

            "scrollbar-thumb-highlighted"
            "{"
            "    background-color: #444;"
            "}"

            "vertical-scrollbar-thumb includes scrollbar-thumb"
            "{"
            "    width:                  100%;"
            "    min-height:             std-scrollbar-thumb-min-size;"
            "    constrain-mouse-drag-x: true;"
            "}"

            "horizontal-scrollbar-thumb includes scrollbar-thumb"
            "{"
            "    height:                 100%;"
            "    min-width :             std-scrollbar-thumb-min-size;"
            "    constrain-mouse-drag-y: true;"
            "}"
        );

        // Scripts.
        result = result && server.ExecuteScript
        (
            "function GTGUI.Element:_Scrollbar(range, pageSize)"
            "    self.thumb = GTGUI.Server.New(\"<div parentid='\" .. self:GetID() .. \"' />\");"
            ""
            "    self.range                 = range    or 1;"
            "    self.pageSize              = pageSize or 1;"
            "    self.tickSize              = 1;"                    // <-- this will be set to a proper value down below.
            "    self.scrollPos             = 0;"
            "    self.isDragging            = false;"
            "    self.autoVisibilityEnabled = false;"
            ""
            "    self.thumb:OnSize(function(data)"
            "        if self.thumb:IsVisible() then"
            "            self:UpdateTickSize();"
            "            self:UpdateThumbPosition();"
            "            self:UpdateVisibility();"
            "        end"
            "    end);"
            ""
            "    self.thumb:OnMove(function(data)"
            "        if self.thumb:IsVisible() then"
            "            self:SetScrollPosition(self.isDragging and self:GetClosestTick() or self.scrollPos, true);"
            "        end;"
            "    end);"
            ""
            "    self.thumb:OnMouseButtonDown(function(data)"
            "        if data.button == GT.MouseButtons.Left then"
            "            self.isDragging = true;"
            "            self.thumb:AttachStyleClass('scrollbar-thumb-highlighted');"
            "        end;"
            "    end);"
            ""
            "    self.thumb:WatchMouseButtonUp(function(data)"
            "        if data.button == GT.MouseButtons.Left and self.isDragging then"
            "            self.isDragging = false;"
            "            self.thumb:DetachStyleClass('scrollbar-thumb-highlighted');"
            "            self:UpdateThumbPosition();"
            "        end;"
            "    end);"
            ""
            "    self.thumb:OnMouseEnter(function()"
            "        self.thumb:AttachStyleClass('scrollbar-thumb-hovered');"
            "        if self.isDragging then"
            "            self.thumb:AttachStyleClass('scrollbar-thumb-highlighted');"
            "        end;"
            "    end);"
            ""
            "    self.thumb:OnMouseLeave(function()"
            "        self.thumb:DetachStyleClass('scrollbar-thumb-hovered');"
            "    end);"
            ""
            "    function self:GetRange()"
            "        return self.range;"
            "    end;"
            ""
            "    function self:SetRange(range, noThumbRounding)"
            "        self.range = math.floor(range);"
            "        self:UpdateTickSize();"
            "        self:UpdateThumbSize();"
            "        self:UpdateThumbPosition();"
            "        self:SetScrollPosition(self:GetScrollPosition(), true);"
            "        self:UpdateVisibility();"
            "    end;"
            ""
            ""
            "    function self:GetPageSize()"
            "        return self.pageSize;"
            "    end;"
            ""
            "    function self:SetPageSize(pageSize, noThumbRounding)"
            "        self.pageSize = math.floor(pageSize);"
            "        self:UpdateTickSize();"
            "        self:UpdateThumbSize();"
            "        self:UpdateThumbPosition();"
            "        self:SetScrollPosition(self:GetScrollPosition(), true);"
            "        self:UpdateVisibility();"
            "    end;"
            ""
            ""
            "    function self:GetScrollPosition()"
            "        return self.scrollPos;"
            "    end;"
            ""
            "    function self:GetMaxScrollPosition()"
            "        if self.range > self.pageSize then"
            "            return self.range - self.pageSize;"
            "        else"
            "            return 0;"
            "        end;"
            "    end;"
            ""
            "    function self:SetScrollPosition(scrollPos, noThumbRounding)"
            "        scrollPos = GT.math.clamp(scrollPos, 0, self:GetMaxScrollPosition());"
            "        if self.scrollPos ~= scrollPos then"
            "            self.scrollPos = scrollPos;"
            "            self:OnScroll();"
            "        end;"
            "        if noThumbRounding == nil or noThumbRounding == false then self:UpdateThumbPosition() end;"
            "    end;"
            ""
            "    function self:Scroll(amount)"
            "        self:SetScrollPosition(self.scrollPos + amount);"
            "    end;"
            ""
            ""
            "    function self:UpdateScrollPosition()"
            "        local newScrollPos = self:GetClosestTick();"
            "        if newScrollPos ~= self.scrollPos then"
            "            self:SetScrollPosition(newScrollPos);"
            "        end;"
            "    end;"
            ""
            ""
            "    function self:EnableAutoVisibility()"
            "        self.autoVisibilityEnabled = true;"
            "        self:UpdateVisibility();"
            "    end;"
            ""
            "    function self:DisableAutoVisibility()"
            "        self.autoVisibilityEnabled = false;"
            "    end;"
            ""
            "    function self:UpdateVisibility()"
            "        if self.autoVisibilityEnabled then"
            "            if self.range <= self.pageSize then"
            "                self:Hide();"
            "            else"
            "                self:Show();"
            "            end;"
            "        end;"
            "    end;"
            ""
            ""
            "    function self:UpdateTickSize()"
            "    end;"
            ""
            "    function self:UpdateThumbPosition()"
            "    end;"
            ""
            "    function self:GetClosestTick()"
            "    end;"
            ""
            "    function self:GetThumbHalfSize()"
            "    end;"
            ""
            "    function self:GetThumbPosition()"
            "    end;"
            ""
            ""
            "    function self:OnScroll(callback)"
            "        if callback then"
            "            self:BindEvent('OnScroll', callback);"
            "        else"
            "            self:CallEvent('OnScroll', { position = self:GetScrollPosition(); });"
            "        end;"
            "    end;"
            ""
            "    return self;"
            "end;"
            

            "function GTGUI.Element:VerticalScrollbar(range, pageSize)"
            "    self:_Scrollbar(range, pageSize);"
            "    self.thumb:AttachStyleClass('vertical-scrollbar-thumb');"
            ""
            ""
            "    function self:UpdateTickSize()"
            "        self.tickSize = self:GetInnerHeight() / self.range;"
            "    end;"
            ""
            ""
            "    function self:UpdateThumbSize()"
            "        local ratio = self.pageSize / self.range;"
            "        if ratio < 1.0 then"
            "            self.thumb:Show();"
            "            self.thumb:SetStyle('height', tostring(ratio * 100) .. '%');"
            "        else"
            "            self.thumb:Hide();"
            "        end;"
            "    end;"
            ""
            "    function self:UpdateThumbPosition()"
            "        local maxPosition = self:GetInnerHeight() - self.thumb:GetHeight();"
            "        local newPosition = 0;"
            ""
            "        if self.scrollPos >= self:GetMaxScrollPosition() then"
            "            newPosition = maxPosition;"
            "        else"
            "            newPosition = math.min(self.scrollPos * self.tickSize, maxPosition);"
            "        end;"
            ""
            "        self.thumb:SetStyle('top', tostring(newPosition));"
            "    end;"
            ""
            ""
            "    function self:GetClosestTick()"
            "        local result = 0;"
            "        if self.thumb:IsVisible() then"
            "            if self.thumb:GetInnerYPosition() == 0 then"
            "                result = 0;"
            "            elseif (self.thumb:GetInnerYPosition() + self.thumb:GetHeight()) >= self:GetInnerHeight() then"
            "                result = self:GetMaxScrollPosition();"
            "            else"
            "                result = math.floor(self:GetThumbPosition() / self.tickSize + 0.5);"
            "            end;"
            "        end;"
            "        return result;"
            "    end;"
            ""
            ""
            "    function self:GetThumbPosition()"
            "        return self.thumb:GetInnerYPosition();"
            "    end;"
            ""
            ""
            "    self:UpdateTickSize();"
            "    self:UpdateThumbSize();"   // The OnSize handler will position it correctly.
            ""
            "    return self;"
            "end;"


            "function GTGUI.Element:HorizontalScrollbar(range, pageSize)"
            "    self:_Scrollbar(range, pageSize);"
            "    self.thumb:AttachStyleClass('horizontal-scrollbar-thumb');"
            ""
            ""
            "    function self:UpdateTickSize()"
            "        self.tickSize = self:GetInnerWidth() / self.range;"
            "    end;"
            ""
            ""
            "    function self:UpdateThumbSize()"
            "        local ratio = self.pageSize / self.range;"
            "        if ratio < 1.0 then"
            "            self.thumb:Show();"
            "            self.thumb:SetStyle('width', tostring(ratio * 100) .. '%');"
            "        else"
            "            self.thumb:Hide();"
            "        end;"
            "    end;"
            ""
            "    function self:UpdateThumbPosition()"
            "        local maxPosition = self:GetInnerWidth() - self.thumb:GetWidth();"
            "        local newPosition = 0;"
            ""
            "        if self.scrollPos >= self:GetMaxScrollPosition() then"
            "            newPosition = maxPosition;"
            "        else"
            "            newPosition = math.min(self.scrollPos * self.tickSize, maxPosition);"
            "        end;"
            ""
            "        self.thumb:SetStyle('left', tostring(newPosition));"
            "    end;"
            ""
            ""
            "    function self:GetClosestTick()"
            "        local result = 0;"
            "        if self.thumb:IsVisible() then"
            "            if self.thumb:GetInnerXPosition() == 0 then"
            "                result = 0;"
            "            elseif (self.thumb:GetInnerXPosition() + self.thumb:GetWidth()) >= self:GetInnerWidth() then"
            "                result = self:GetMaxScrollPosition();"
            "            else"
            "                result = math.floor(self:GetThumbPosition() / self.tickSize + 0.5);"
            "            end;"
            "        end;"
            "        return result;"
            "    end;"
            ""
            "    function self:GetThumbPosition()"
            "        return self.thumb:GetInnerXPosition();"
            "    end;"
            ""
            ""
            "    self:UpdateTickSize();"
            "    self:UpdateThumbSize();"   // The OnSize handler will set the position.
            ""
            "    return self;"
            "end;"
        );

        return result;
    }

    ////////////////////////////////////////////////
    // Tooltips
    bool GUIStandardLibrary::LoadTooltips(GUIServer &server)
    {
        bool result = true;

        // Styles.
        result = result && server.ExecuteStyleScript
        (
            "tooltip"
            "{"
            "    visible:                 false;"
            "    positioning:             absolute;"
            "    transparent-mouse-input: true;"
            "    text-color:              #444;"
            "    background-color:        #bbb;"
            "    border:                  1px #333;"
            "    width:                   auto;"
            "    height:                  auto;"
            "    padding:                 2px;"
            "    vertical-align:          center;"
            ""
            "    enable-shadow:           true;"
            "    shadow-color:            #000;"
            "    shadow-offset-x:         2px;"
            "    shadow-offset-y:         2px;"
            "    shadow-extrusion-x:      2px;"
            "    shadow-extrusion-y:      2px;"
            "    shadow-blur-radius:      4px;"
            "}"
        );

        // Scripts.
        result = result && server.ExecuteScript
        (
            "function GTGUI.Element:Tooltip()"
            "    function self:ConstrainToViewport()"
            "        local xPos           = self:GetXPosition();"
            "        local yPos           = self:GetYPosition();"
            "        local width          = self:GetWidth();"
            "        local height         = self:GetHeight();"
            "        local viewportWidth  = GTGUI.Server.GetViewportWidth();"
            "        local viewportHeight = GTGUI.Server.GetViewportHeight();"
            ""
            "        if xPos + width > viewportWidth then"
            "            xPos = xPos + (viewportWidth - (xPos + width)) - 4;"
            "        end;"
            ""
            "        if yPos + height > GTGUI.Server.GetViewportHeight() then"
            "            yPos = yPos - height - 2;"
            "        else"
            "            yPos = yPos + 16;"
            "        end;"
            ""
            "        self:SetPosition(xPos, yPos);"
            "    end;"
            ""
            "    self:OnShow(function()"
            "        self:ConstrainToViewport();"
            "    end);"
            ""
            "    return self;"
            "end;"
        );

        result = result && server.ExecuteScript
        (
            "GTGUI.DefaultTooltip = GTGUI.Server.CreateElement(nil, 'tooltip');"
            "GTGUI.DefaultTooltip:Tooltip();"

            "function GTGUI.ShowDefaultTooltip(text, xpos, ypos)"
            "    GTGUI.DefaultTooltip:SetText(text);"
            "    GTGUI.DefaultTooltip:SetPosition(xpos, ypos);"
            "    GTGUI.DefaultTooltip:BringToTop();"
            "    GTGUI.DefaultTooltip:Show();"
            "end;"

            "function GTGUI.HideDefaultTooltip()"
            "    GTGUI.DefaultTooltip:Hide();"
            "end;"
        );

        return result;
    }
}
