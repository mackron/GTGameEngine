// Copyright (C) 2011 - 2014 David Reid. See included LICENCE.

#include <GTEngine/Scripting.hpp>
#include <GTEngine/GTEngine.hpp>
#include <GTEngine/IO.hpp>
#include <GTEngine/PrefabLibrary.hpp>
#include <GTEngine/ScriptLibrary.hpp>
#include <GTEngine/Physics/CollisionShapeTypes.hpp>
#include <easy_path/easy_path.h>
#include <GTEngine/Core/System.hpp>

// Temp until we get some more support in Script.
extern "C"
{
#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>
}


namespace GT
{
    static GTLib::RandomLCG g_Random;

    // This is the code from the lua-bit-numberlua project at https://github.com/davidm/lua-bit-numberlua. Below is the licence.
    //
    // Copyright (C) 2008, David Manura.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    // THE SOFTWARE.
    char numberlua[] = {
        0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x4d, 0x20, 0x3d, 0x20, 0x7b, 0x5f,
        0x54, 0x59, 0x50, 0x45, 0x3d, 0x27, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
        0x27, 0x2c, 0x20, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x3d, 0x27, 0x62, 0x69,
        0x74, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x75, 0x61, 0x27,
        0x2c, 0x20, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x3d, 0x27,
        0x30, 0x2e, 0x33, 0x2e, 0x31, 0x2e, 0x32, 0x30, 0x31, 0x32, 0x30, 0x31,
        0x33, 0x31, 0x27, 0x7d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20,
        0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x74, 0x68,
        0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x20, 0x4d, 0x4f, 0x44, 0x20, 0x3d, 0x20, 0x32, 0x5e, 0x33, 0x32,
        0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x4d, 0x4f, 0x44, 0x4d, 0x20,
        0x3d, 0x20, 0x4d, 0x4f, 0x44, 0x2d, 0x31, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
        0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
        0x6d, 0x65, 0x6d, 0x6f, 0x69, 0x7a, 0x65, 0x28, 0x66, 0x29, 0x0a, 0x20,
        0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x6d, 0x74, 0x20, 0x3d, 0x20,
        0x7b, 0x7d, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x74,
        0x20, 0x3d, 0x20, 0x73, 0x65, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x61,
        0x62, 0x6c, 0x65, 0x28, 0x7b, 0x7d, 0x2c, 0x20, 0x6d, 0x74, 0x29, 0x0a,
        0x20, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
        0x74, 0x3a, 0x5f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x28, 0x6b, 0x29,
        0x0a, 0x20, 0x20, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76,
        0x20, 0x3d, 0x20, 0x66, 0x28, 0x6b, 0x29, 0x3b, 0x20, 0x74, 0x5b, 0x6b,
        0x5d, 0x20, 0x3d, 0x20, 0x76, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
        0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x0a, 0x20, 0x20, 0x65, 0x6e, 0x64,
        0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x0a,
        0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66,
        0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x61, 0x6b, 0x65,
        0x5f, 0x62, 0x69, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x63, 0x61, 0x63,
        0x68, 0x65, 0x64, 0x28, 0x74, 0x2c, 0x20, 0x6d, 0x29, 0x0a, 0x20, 0x20,
        0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
        0x6f, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x6f, 0x70, 0x28, 0x61, 0x2c, 0x20,
        0x62, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x20, 0x72, 0x65, 0x73, 0x2c, 0x70, 0x20, 0x3d, 0x20, 0x30, 0x2c, 0x31,
        0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x61,
        0x20, 0x7e, 0x3d, 0x20, 0x30, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x20,
        0x7e, 0x3d, 0x20, 0x30, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x6d, 0x2c, 0x20,
        0x62, 0x6d, 0x20, 0x3d, 0x20, 0x61, 0x25, 0x6d, 0x2c, 0x20, 0x62, 0x25,
        0x6d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x73, 0x20,
        0x3d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x2b, 0x20, 0x74, 0x5b, 0x61, 0x6d,
        0x5d, 0x5b, 0x62, 0x6d, 0x5d, 0x2a, 0x70, 0x0a, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x61, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x20, 0x2d, 0x20, 0x61,
        0x6d, 0x29, 0x20, 0x2f, 0x20, 0x6d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x62, 0x20, 0x3d, 0x20, 0x28, 0x62, 0x20, 0x2d, 0x20, 0x62, 0x6d,
        0x29, 0x20, 0x2f, 0x20, 0x6d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x70, 0x20, 0x3d, 0x20, 0x70, 0x2a, 0x6d, 0x0a, 0x20, 0x20, 0x20, 0x20,
        0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x73, 0x20,
        0x3d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x2b, 0x20, 0x28, 0x61, 0x2b, 0x62,
        0x29, 0x2a, 0x70, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75,
        0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x0a, 0x20, 0x20, 0x65, 0x6e, 0x64,
        0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x69,
        0x74, 0x6f, 0x70, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
        0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
        0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x6f, 0x70, 0x28, 0x74,
        0x29, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x6f, 0x70,
        0x31, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x62, 0x69, 0x74,
        0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x28,
        0x74, 0x2c, 0x32, 0x5e, 0x31, 0x29, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63,
        0x61, 0x6c, 0x20, 0x6f, 0x70, 0x32, 0x20, 0x3d, 0x20, 0x6d, 0x65, 0x6d,
        0x6f, 0x69, 0x7a, 0x65, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
        0x6e, 0x28, 0x61, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74,
        0x75, 0x72, 0x6e, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x69, 0x7a, 0x65, 0x28,
        0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x62, 0x29, 0x0a,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x6f, 0x70, 0x31, 0x28, 0x61, 0x2c, 0x20, 0x62, 0x29, 0x0a, 0x20,
        0x20, 0x20, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x20, 0x20, 0x65, 0x6e,
        0x64, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
        0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x6f, 0x70, 0x5f, 0x75,
        0x6e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x28, 0x6f, 0x70, 0x32, 0x2c,
        0x20, 0x32, 0x5e, 0x28, 0x74, 0x2e, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x31,
        0x29, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x2d, 0x2d, 0x20, 0x6f,
        0x6b, 0x3f, 0x20, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x66, 0x20, 0x72, 0x75, 0x6e, 0x6e,
        0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x33, 0x32, 0x2d,
        0x62, 0x69, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x4c, 0x75, 0x61, 0x20,
        0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
        0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x0a, 0x66, 0x75, 0x6e,
        0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x74, 0x6f, 0x62, 0x69,
        0x74, 0x28, 0x78, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
        0x6e, 0x20, 0x78, 0x20, 0x25, 0x20, 0x32, 0x5e, 0x33, 0x32, 0x0a, 0x65,
        0x6e, 0x64, 0x0a, 0x0a, 0x4d, 0x2e, 0x62, 0x78, 0x6f, 0x72, 0x20, 0x3d,
        0x20, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x6f, 0x70, 0x20,
        0x7b, 0x5b, 0x30, 0x5d, 0x3d, 0x7b, 0x5b, 0x30, 0x5d, 0x3d, 0x30, 0x2c,
        0x5b, 0x31, 0x5d, 0x3d, 0x31, 0x7d, 0x2c, 0x5b, 0x31, 0x5d, 0x3d, 0x7b,
        0x5b, 0x30, 0x5d, 0x3d, 0x31, 0x2c, 0x5b, 0x31, 0x5d, 0x3d, 0x30, 0x7d,
        0x2c, 0x20, 0x6e, 0x3d, 0x34, 0x7d, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x20, 0x62, 0x78, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x62, 0x78,
        0x6f, 0x72, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
        0x20, 0x4d, 0x2e, 0x62, 0x6e, 0x6f, 0x74, 0x28, 0x61, 0x29, 0x20, 0x20,
        0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4d, 0x4f, 0x44, 0x4d,
        0x20, 0x2d, 0x20, 0x61, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x6c, 0x6f, 0x63,
        0x61, 0x6c, 0x20, 0x62, 0x6e, 0x6f, 0x74, 0x20, 0x3d, 0x20, 0x4d, 0x2e,
        0x62, 0x6e, 0x6f, 0x74, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
        0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x28, 0x61, 0x2c,
        0x62, 0x29, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x28,
        0x61, 0x2b, 0x62, 0x29, 0x20, 0x2d, 0x20, 0x62, 0x78, 0x6f, 0x72, 0x28,
        0x61, 0x2c, 0x62, 0x29, 0x29, 0x2f, 0x32, 0x20, 0x65, 0x6e, 0x64, 0x0a,
        0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x62, 0x61, 0x6e, 0x64, 0x20, 0x3d,
        0x20, 0x4d, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x0a, 0x0a, 0x66, 0x75, 0x6e,
        0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x6f, 0x72, 0x28,
        0x61, 0x2c, 0x62, 0x29, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4d, 0x4f, 0x44, 0x4d, 0x20, 0x2d, 0x20, 0x62, 0x61, 0x6e, 0x64,
        0x28, 0x4d, 0x4f, 0x44, 0x4d, 0x20, 0x2d, 0x20, 0x61, 0x2c, 0x20, 0x4d,
        0x4f, 0x44, 0x4d, 0x20, 0x2d, 0x20, 0x62, 0x29, 0x20, 0x65, 0x6e, 0x64,
        0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x62, 0x6f, 0x72, 0x20, 0x3d,
        0x20, 0x4d, 0x2e, 0x62, 0x6f, 0x72, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x20, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2c, 0x20, 0x72, 0x73,
        0x68, 0x69, 0x66, 0x74, 0x20, 0x2d, 0x2d, 0x20, 0x66, 0x6f, 0x72, 0x77,
        0x61, 0x72, 0x64, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x0a,
        0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e,
        0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x61, 0x2c, 0x64, 0x69, 0x73,
        0x70, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x35, 0x2e, 0x32,
        0x20, 0x69, 0x6e, 0x73, 0x69, 0x70, 0x72, 0x65, 0x64, 0x0a, 0x20, 0x20,
        0x69, 0x66, 0x20, 0x64, 0x69, 0x73, 0x70, 0x20, 0x3c, 0x20, 0x30, 0x20,
        0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
        0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x61, 0x2c, 0x2d, 0x64, 0x69,
        0x73, 0x70, 0x29, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x72, 0x65,
        0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x61,
        0x20, 0x25, 0x20, 0x32, 0x5e, 0x33, 0x32, 0x20, 0x2f, 0x20, 0x32, 0x5e,
        0x64, 0x69, 0x73, 0x70, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x72, 0x73,
        0x68, 0x69, 0x66, 0x74, 0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x72, 0x73, 0x68,
        0x69, 0x66, 0x74, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
        0x6e, 0x20, 0x4d, 0x2e, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x61,
        0x2c, 0x64, 0x69, 0x73, 0x70, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75,
        0x61, 0x35, 0x2e, 0x32, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
        0x64, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x64, 0x69, 0x73, 0x70, 0x20,
        0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74,
        0x75, 0x72, 0x6e, 0x20, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x61,
        0x2c, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x29, 0x20, 0x65, 0x6e, 0x64, 0x20,
        0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x61,
        0x20, 0x2a, 0x20, 0x32, 0x5e, 0x64, 0x69, 0x73, 0x70, 0x29, 0x20, 0x25,
        0x20, 0x32, 0x5e, 0x33, 0x32, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x6c, 0x73,
        0x68, 0x69, 0x66, 0x74, 0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x6c, 0x73, 0x68,
        0x69, 0x66, 0x74, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
        0x6e, 0x20, 0x4d, 0x2e, 0x74, 0x6f, 0x68, 0x65, 0x78, 0x28, 0x78, 0x2c,
        0x20, 0x6e, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x42, 0x69, 0x74, 0x4f, 0x70,
        0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x6e, 0x20, 0x3d,
        0x20, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x38, 0x0a, 0x20, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20,
        0x6e, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a,
        0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x20, 0x3d, 0x3d, 0x20,
        0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
        0x6e, 0x20, 0x27, 0x27, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20,
        0x20, 0x75, 0x70, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x0a, 0x20,
        0x20, 0x20, 0x20, 0x6e, 0x20, 0x3d, 0x20, 0x2d, 0x20, 0x6e, 0x0a, 0x20,
        0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x62,
        0x61, 0x6e, 0x64, 0x28, 0x78, 0x2c, 0x20, 0x31, 0x36, 0x5e, 0x6e, 0x2d,
        0x31, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
        0x28, 0x27, 0x25, 0x30, 0x27, 0x2e, 0x2e, 0x6e, 0x2e, 0x2e, 0x28, 0x75,
        0x70, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x27, 0x58, 0x27, 0x20, 0x6f, 0x72,
        0x20, 0x27, 0x78, 0x27, 0x29, 0x29, 0x3a, 0x66, 0x6f, 0x72, 0x6d, 0x61,
        0x74, 0x28, 0x78, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x6c, 0x6f, 0x63,
        0x61, 0x6c, 0x20, 0x74, 0x6f, 0x68, 0x65, 0x78, 0x20, 0x3d, 0x20, 0x4d,
        0x2e, 0x74, 0x6f, 0x68, 0x65, 0x78, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63,
        0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61,
        0x63, 0x74, 0x28, 0x6e, 0x2c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2c,
        0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x4c,
        0x75, 0x61, 0x35, 0x2e, 0x32, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
        0x65, 0x64, 0x0a, 0x20, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3d,
        0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x6f, 0x72, 0x20, 0x31, 0x0a,
        0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x61, 0x6e,
        0x64, 0x28, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x6e, 0x2c, 0x20,
        0x66, 0x69, 0x65, 0x6c, 0x64, 0x29, 0x2c, 0x20, 0x32, 0x5e, 0x77, 0x69,
        0x64, 0x74, 0x68, 0x2d, 0x31, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x6c,
        0x6f, 0x63, 0x61, 0x6c, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
        0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
        0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d,
        0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x6e, 0x2c, 0x20,
        0x76, 0x2c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2c, 0x20, 0x77, 0x69,
        0x64, 0x74, 0x68, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x35,
        0x2e, 0x32, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x0a,
        0x20, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x77, 0x69,
        0x64, 0x74, 0x68, 0x20, 0x6f, 0x72, 0x20, 0x31, 0x0a, 0x20, 0x20, 0x6c,
        0x6f, 0x63, 0x61, 0x6c, 0x20, 0x6d, 0x61, 0x73, 0x6b, 0x31, 0x20, 0x3d,
        0x20, 0x32, 0x5e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2d, 0x31, 0x0a, 0x20,
        0x20, 0x76, 0x20, 0x3d, 0x20, 0x62, 0x61, 0x6e, 0x64, 0x28, 0x76, 0x2c,
        0x20, 0x6d, 0x61, 0x73, 0x6b, 0x31, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x72,
        0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73,
        0x70, 0x65, 0x63, 0x3f, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x20, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x3d, 0x20, 0x62, 0x6e, 0x6f, 0x74,
        0x28, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x6d, 0x61, 0x73, 0x6b,
        0x31, 0x2c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x29, 0x29, 0x0a, 0x20,
        0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x61, 0x6e, 0x64,
        0x28, 0x6e, 0x2c, 0x20, 0x6d, 0x61, 0x73, 0x6b, 0x29, 0x20, 0x2b, 0x20,
        0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x76, 0x2c, 0x20, 0x66, 0x69,
        0x65, 0x6c, 0x64, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x6c, 0x6f, 0x63,
        0x61, 0x6c, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x3d,
        0x20, 0x4d, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x0a, 0x0a,
        0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62,
        0x73, 0x77, 0x61, 0x70, 0x28, 0x78, 0x29, 0x20, 0x20, 0x2d, 0x2d, 0x20,
        0x42, 0x69, 0x74, 0x4f, 0x70, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x0a,
        0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x20, 0x3d, 0x20,
        0x62, 0x61, 0x6e, 0x64, 0x28, 0x78, 0x2c, 0x20, 0x30, 0x78, 0x66, 0x66,
        0x29, 0x3b, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x72, 0x73, 0x68, 0x69, 0x66,
        0x74, 0x28, 0x78, 0x2c, 0x20, 0x38, 0x29, 0x0a, 0x20, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x62, 0x20, 0x3d, 0x20, 0x62, 0x61, 0x6e, 0x64,
        0x28, 0x78, 0x2c, 0x20, 0x30, 0x78, 0x66, 0x66, 0x29, 0x3b, 0x20, 0x78,
        0x20, 0x3d, 0x20, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x2c,
        0x20, 0x38, 0x29, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20,
        0x63, 0x20, 0x3d, 0x20, 0x62, 0x61, 0x6e, 0x64, 0x28, 0x78, 0x2c, 0x20,
        0x30, 0x78, 0x66, 0x66, 0x29, 0x3b, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x72,
        0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x2c, 0x20, 0x38, 0x29, 0x0a,
        0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x64, 0x20, 0x3d, 0x20,
        0x62, 0x61, 0x6e, 0x64, 0x28, 0x78, 0x2c, 0x20, 0x30, 0x78, 0x66, 0x66,
        0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c,
        0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74,
        0x28, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x61, 0x2c, 0x20, 0x38,
        0x29, 0x20, 0x2b, 0x20, 0x62, 0x2c, 0x20, 0x38, 0x29, 0x20, 0x2b, 0x20,
        0x63, 0x2c, 0x20, 0x38, 0x29, 0x20, 0x2b, 0x20, 0x64, 0x0a, 0x65, 0x6e,
        0x64, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x62, 0x73, 0x77, 0x61,
        0x70, 0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x62, 0x73, 0x77, 0x61, 0x70, 0x0a,
        0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e,
        0x72, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x28, 0x78, 0x2c, 0x20, 0x64,
        0x69, 0x73, 0x70, 0x29, 0x20, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61,
        0x35, 0x2e, 0x32, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64,
        0x0a, 0x20, 0x20, 0x64, 0x69, 0x73, 0x70, 0x20, 0x3d, 0x20, 0x64, 0x69,
        0x73, 0x70, 0x20, 0x25, 0x20, 0x33, 0x32, 0x0a, 0x20, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x6c, 0x6f, 0x77, 0x20, 0x3d, 0x20, 0x62, 0x61,
        0x6e, 0x64, 0x28, 0x78, 0x2c, 0x20, 0x32, 0x5e, 0x64, 0x69, 0x73, 0x70,
        0x2d, 0x31, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x2c, 0x20, 0x64,
        0x69, 0x73, 0x70, 0x29, 0x20, 0x2b, 0x20, 0x6c, 0x73, 0x68, 0x69, 0x66,
        0x74, 0x28, 0x6c, 0x6f, 0x77, 0x2c, 0x20, 0x33, 0x32, 0x2d, 0x64, 0x69,
        0x73, 0x70, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x20, 0x72, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x20, 0x3d, 0x20,
        0x4d, 0x2e, 0x72, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x0a, 0x0a, 0x66,
        0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x6c, 0x72,
        0x6f, 0x74, 0x61, 0x74, 0x65, 0x28, 0x78, 0x2c, 0x20, 0x64, 0x69, 0x73,
        0x70, 0x29, 0x20, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x35, 0x2e,
        0x32, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x0a, 0x20,
        0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x72, 0x6f, 0x74,
        0x61, 0x74, 0x65, 0x28, 0x78, 0x2c, 0x20, 0x2d, 0x64, 0x69, 0x73, 0x70,
        0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20,
        0x6c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x20, 0x3d, 0x20, 0x4d, 0x2e,
        0x6c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x0a, 0x0a, 0x4d, 0x2e, 0x72,
        0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x6c, 0x72, 0x6f, 0x74, 0x61,
        0x74, 0x65, 0x20, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x4f, 0x70,
        0x20, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x0a, 0x4d, 0x2e,
        0x72, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x72, 0x72, 0x6f, 0x74,
        0x61, 0x74, 0x65, 0x20, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x4f,
        0x70, 0x20, 0x69, 0x6e, 0x73, 0x69, 0x70, 0x72, 0x65, 0x64, 0x0a, 0x0a,
        0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e,
        0x61, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x2c, 0x20, 0x64,
        0x69, 0x73, 0x70, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x35,
        0x2e, 0x32, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x0a,
        0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x7a, 0x20, 0x3d, 0x20,
        0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x2c, 0x20, 0x64, 0x69,
        0x73, 0x70, 0x29, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x78, 0x20, 0x3e,
        0x3d, 0x20, 0x30, 0x78, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x7a, 0x20, 0x3d, 0x20, 0x7a, 0x20,
        0x2b, 0x20, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x32, 0x5e, 0x64,
        0x69, 0x73, 0x70, 0x2d, 0x31, 0x2c, 0x20, 0x33, 0x32, 0x2d, 0x64, 0x69,
        0x73, 0x70, 0x29, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x72, 0x65,
        0x74, 0x75, 0x72, 0x6e, 0x20, 0x7a, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x6c,
        0x6f, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74,
        0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x61, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74,
        0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d,
        0x2e, 0x62, 0x74, 0x65, 0x73, 0x74, 0x28, 0x78, 0x2c, 0x20, 0x79, 0x29,
        0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x35, 0x2e, 0x32, 0x20, 0x69,
        0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x0a, 0x20, 0x20, 0x72, 0x65,
        0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x61, 0x6e, 0x64, 0x28, 0x78, 0x2c,
        0x20, 0x79, 0x29, 0x20, 0x7e, 0x3d, 0x20, 0x30, 0x0a, 0x65, 0x6e, 0x64,
        0x0a, 0x0a, 0x2d, 0x2d, 0x0a, 0x2d, 0x2d, 0x20, 0x53, 0x74, 0x61, 0x72,
        0x74, 0x20, 0x4c, 0x75, 0x61, 0x20, 0x35, 0x2e, 0x32, 0x20, 0x22, 0x62,
        0x69, 0x74, 0x33, 0x32, 0x22, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
        0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x2d, 0x2d,
        0x0a, 0x0a, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x33, 0x32, 0x20, 0x3d, 0x20,
        0x7b, 0x7d, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x20, 0x35, 0x2e,
        0x32, 0x20, 0x27, 0x62, 0x69, 0x74, 0x33, 0x32, 0x27, 0x20, 0x63, 0x6f,
        0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x0a,
        0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63,
        0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x33, 0x32, 0x5f, 0x62,
        0x6e, 0x6f, 0x74, 0x28, 0x78, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74,
        0x75, 0x72, 0x6e, 0x20, 0x28, 0x2d, 0x31, 0x20, 0x2d, 0x20, 0x78, 0x29,
        0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x4d,
        0x2e, 0x62, 0x69, 0x74, 0x33, 0x32, 0x2e, 0x62, 0x6e, 0x6f, 0x74, 0x20,
        0x3d, 0x20, 0x62, 0x69, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x6e, 0x6f, 0x74,
        0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63,
        0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x33, 0x32, 0x5f, 0x62,
        0x78, 0x6f, 0x72, 0x28, 0x61, 0x2c, 0x20, 0x62, 0x2c, 0x20, 0x63, 0x2c,
        0x20, 0x2e, 0x2e, 0x2e, 0x29, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x20, 0x7a, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x62, 0x20, 0x74,
        0x68, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x20, 0x3d, 0x20,
        0x61, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x0a, 0x20, 0x20, 0x20, 0x20,
        0x62, 0x20, 0x3d, 0x20, 0x62, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x0a,
        0x20, 0x20, 0x20, 0x20, 0x7a, 0x20, 0x3d, 0x20, 0x62, 0x78, 0x6f, 0x72,
        0x28, 0x61, 0x2c, 0x20, 0x62, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69,
        0x66, 0x20, 0x63, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x7a, 0x20, 0x3d, 0x20, 0x62, 0x69, 0x74, 0x33, 0x32,
        0x5f, 0x62, 0x78, 0x6f, 0x72, 0x28, 0x7a, 0x2c, 0x20, 0x63, 0x2c, 0x20,
        0x2e, 0x2e, 0x2e, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6e, 0x64,
        0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
        0x7a, 0x0a, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x69, 0x66, 0x20, 0x61,
        0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
        0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44,
        0x0a, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20,
        0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x0a, 0x20, 0x20, 0x65,
        0x6e, 0x64, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x4d, 0x2e, 0x62, 0x69, 0x74,
        0x33, 0x32, 0x2e, 0x62, 0x78, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x62, 0x69,
        0x74, 0x33, 0x32, 0x5f, 0x62, 0x78, 0x6f, 0x72, 0x0a, 0x0a, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
        0x20, 0x62, 0x69, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x28,
        0x61, 0x2c, 0x20, 0x62, 0x2c, 0x20, 0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e,
        0x29, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x7a, 0x0a,
        0x20, 0x20, 0x69, 0x66, 0x20, 0x62, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a,
        0x20, 0x20, 0x20, 0x20, 0x61, 0x20, 0x3d, 0x20, 0x61, 0x20, 0x25, 0x20,
        0x4d, 0x4f, 0x44, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x20, 0x3d, 0x20,
        0x62, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x0a, 0x20, 0x20, 0x20, 0x20,
        0x7a, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x61, 0x2b, 0x62, 0x29, 0x20, 0x2d,
        0x20, 0x62, 0x78, 0x6f, 0x72, 0x28, 0x61, 0x2c, 0x62, 0x29, 0x29, 0x20,
        0x2f, 0x20, 0x32, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x63,
        0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x7a, 0x20, 0x3d, 0x20, 0x62, 0x69, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x61,
        0x6e, 0x64, 0x28, 0x7a, 0x2c, 0x20, 0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e,
        0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20,
        0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x7a, 0x0a, 0x20,
        0x20, 0x65, 0x6c, 0x73, 0x65, 0x69, 0x66, 0x20, 0x61, 0x20, 0x74, 0x68,
        0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
        0x6e, 0x20, 0x61, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x0a, 0x20, 0x20,
        0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74,
        0x75, 0x72, 0x6e, 0x20, 0x4d, 0x4f, 0x44, 0x4d, 0x0a, 0x20, 0x20, 0x65,
        0x6e, 0x64, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x4d, 0x2e, 0x62, 0x69, 0x74,
        0x33, 0x32, 0x2e, 0x62, 0x61, 0x6e, 0x64, 0x20, 0x3d, 0x20, 0x62, 0x69,
        0x74, 0x33, 0x32, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x0a, 0x0a, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
        0x20, 0x62, 0x69, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x72, 0x28, 0x61,
        0x2c, 0x20, 0x62, 0x2c, 0x20, 0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29,
        0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x7a, 0x0a, 0x20,
        0x20, 0x69, 0x66, 0x20, 0x62, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a, 0x20,
        0x20, 0x20, 0x20, 0x61, 0x20, 0x3d, 0x20, 0x61, 0x20, 0x25, 0x20, 0x4d,
        0x4f, 0x44, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x20, 0x3d, 0x20, 0x62,
        0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7a,
        0x20, 0x3d, 0x20, 0x4d, 0x4f, 0x44, 0x4d, 0x20, 0x2d, 0x20, 0x62, 0x61,
        0x6e, 0x64, 0x28, 0x4d, 0x4f, 0x44, 0x4d, 0x20, 0x2d, 0x20, 0x61, 0x2c,
        0x20, 0x4d, 0x4f, 0x44, 0x4d, 0x20, 0x2d, 0x20, 0x62, 0x29, 0x0a, 0x20,
        0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x63, 0x20, 0x74, 0x68, 0x65, 0x6e,
        0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7a, 0x20, 0x3d, 0x20, 0x62,
        0x69, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x72, 0x28, 0x7a, 0x2c, 0x20,
        0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20,
        0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75,
        0x72, 0x6e, 0x20, 0x7a, 0x0a, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x69,
        0x66, 0x20, 0x61, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20,
        0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x20, 0x25, 0x20,
        0x4d, 0x4f, 0x44, 0x0a, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20,
        0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x0a,
        0x20, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x4d, 0x2e,
        0x62, 0x69, 0x74, 0x33, 0x32, 0x2e, 0x62, 0x6f, 0x72, 0x20, 0x3d, 0x20,
        0x62, 0x69, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x72, 0x0a, 0x0a, 0x66,
        0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x69,
        0x74, 0x33, 0x32, 0x2e, 0x62, 0x74, 0x65, 0x73, 0x74, 0x28, 0x2e, 0x2e,
        0x2e, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
        0x62, 0x69, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x28, 0x2e,
        0x2e, 0x2e, 0x29, 0x20, 0x7e, 0x3d, 0x20, 0x30, 0x0a, 0x65, 0x6e, 0x64,
        0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d,
        0x2e, 0x62, 0x69, 0x74, 0x33, 0x32, 0x2e, 0x6c, 0x72, 0x6f, 0x74, 0x61,
        0x74, 0x65, 0x28, 0x78, 0x2c, 0x20, 0x64, 0x69, 0x73, 0x70, 0x29, 0x0a,
        0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x72, 0x6f,
        0x74, 0x61, 0x74, 0x65, 0x28, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44,
        0x2c, 0x20, 0x64, 0x69, 0x73, 0x70, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a,
        0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e,
        0x62, 0x69, 0x74, 0x33, 0x32, 0x2e, 0x72, 0x72, 0x6f, 0x74, 0x61, 0x74,
        0x65, 0x28, 0x78, 0x2c, 0x20, 0x64, 0x69, 0x73, 0x70, 0x29, 0x0a, 0x20,
        0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x72, 0x6f, 0x74,
        0x61, 0x74, 0x65, 0x28, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c,
        0x20, 0x64, 0x69, 0x73, 0x70, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a,
        0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62,
        0x69, 0x74, 0x33, 0x32, 0x2e, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28,
        0x78, 0x2c, 0x64, 0x69, 0x73, 0x70, 0x29, 0x0a, 0x20, 0x20, 0x69, 0x66,
        0x20, 0x64, 0x69, 0x73, 0x70, 0x20, 0x3e, 0x20, 0x33, 0x31, 0x20, 0x6f,
        0x72, 0x20, 0x64, 0x69, 0x73, 0x70, 0x20, 0x3c, 0x20, 0x2d, 0x33, 0x31,
        0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74,
        0x75, 0x72, 0x6e, 0x20, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78,
        0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c, 0x20, 0x64, 0x69, 0x73, 0x70,
        0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74,
        0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x33, 0x32, 0x2e,
        0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x2c, 0x64, 0x69, 0x73,
        0x70, 0x29, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x64, 0x69, 0x73, 0x70,
        0x20, 0x3e, 0x20, 0x33, 0x31, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73,
        0x70, 0x20, 0x3c, 0x20, 0x2d, 0x33, 0x31, 0x20, 0x74, 0x68, 0x65, 0x6e,
        0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x20, 0x65, 0x6e,
        0x64, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72,
        0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f,
        0x44, 0x2c, 0x20, 0x64, 0x69, 0x73, 0x70, 0x29, 0x0a, 0x65, 0x6e, 0x64,
        0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d,
        0x2e, 0x62, 0x69, 0x74, 0x33, 0x32, 0x2e, 0x61, 0x72, 0x73, 0x68, 0x69,
        0x66, 0x74, 0x28, 0x78, 0x2c, 0x64, 0x69, 0x73, 0x70, 0x29, 0x0a, 0x20,
        0x20, 0x78, 0x20, 0x3d, 0x20, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44,
        0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x64, 0x69, 0x73, 0x70, 0x20, 0x3e,
        0x3d, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20,
        0x20, 0x69, 0x66, 0x20, 0x64, 0x69, 0x73, 0x70, 0x20, 0x3e, 0x20, 0x33,
        0x31, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x78, 0x20, 0x3e,
        0x3d, 0x20, 0x30, 0x78, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4d, 0x4f, 0x44, 0x4d, 0x20, 0x6f,
        0x72, 0x20, 0x30, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65,
        0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x20, 0x7a, 0x20, 0x3d, 0x20, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28,
        0x78, 0x2c, 0x20, 0x64, 0x69, 0x73, 0x70, 0x29, 0x0a, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x78, 0x20, 0x3e, 0x3d, 0x20, 0x30,
        0x78, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x74, 0x68,
        0x65, 0x6e, 0x20, 0x7a, 0x20, 0x3d, 0x20, 0x7a, 0x20, 0x2b, 0x20, 0x6c,
        0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x32, 0x5e, 0x64, 0x69, 0x73, 0x70,
        0x2d, 0x31, 0x2c, 0x20, 0x33, 0x32, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x29,
        0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72,
        0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x7a, 0x0a, 0x20, 0x20, 0x20, 0x20,
        0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20,
        0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x73,
        0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x2c, 0x20, 0x2d, 0x64, 0x69, 0x73,
        0x70, 0x29, 0x0a, 0x20, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x65, 0x6e, 0x64,
        0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d,
        0x2e, 0x62, 0x69, 0x74, 0x33, 0x32, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x61,
        0x63, 0x74, 0x28, 0x78, 0x2c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2c,
        0x20, 0x2e, 0x2e, 0x2e, 0x29, 0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61,
        0x6c, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x2e, 0x2e,
        0x2e, 0x20, 0x6f, 0x72, 0x20, 0x31, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20,
        0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x6f, 0x72,
        0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x3e, 0x20, 0x33, 0x31, 0x20,
        0x6f, 0x72, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3c, 0x20, 0x30,
        0x20, 0x6f, 0x72, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2b, 0x77, 0x69,
        0x64, 0x74, 0x68, 0x20, 0x3e, 0x20, 0x33, 0x32, 0x20, 0x74, 0x68, 0x65,
        0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x27, 0x6f, 0x75, 0x74,
        0x20, 0x6f, 0x66, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x27, 0x20, 0x65,
        0x6e, 0x64, 0x0a, 0x20, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x78, 0x20, 0x25,
        0x20, 0x4d, 0x4f, 0x44, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
        0x6e, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x28, 0x78, 0x2c,
        0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29,
        0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
        0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x33, 0x32, 0x2e, 0x72,
        0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x78, 0x2c, 0x20, 0x76, 0x2c,
        0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29,
        0x0a, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x64,
        0x74, 0x68, 0x20, 0x3d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x72, 0x20,
        0x31, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
        0x20, 0x3c, 0x20, 0x30, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x69, 0x65, 0x6c,
        0x64, 0x20, 0x3e, 0x20, 0x33, 0x31, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x69,
        0x64, 0x74, 0x68, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x6f, 0x72, 0x20, 0x66,
        0x69, 0x65, 0x6c, 0x64, 0x2b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3e,
        0x20, 0x33, 0x32, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x65, 0x72, 0x72,
        0x6f, 0x72, 0x20, 0x27, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72,
        0x61, 0x6e, 0x67, 0x65, 0x27, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20,
        0x78, 0x20, 0x3d, 0x20, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x0a,
        0x20, 0x20, 0x76, 0x20, 0x3d, 0x20, 0x76, 0x20, 0x25, 0x20, 0x4d, 0x4f,
        0x44, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72,
        0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x78, 0x2c, 0x20, 0x76, 0x2c,
        0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29,
        0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x0a, 0x2d, 0x2d, 0x0a, 0x2d, 0x2d,
        0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x4c, 0x75, 0x61, 0x42, 0x69,
        0x74, 0x4f, 0x70, 0x20, 0x22, 0x62, 0x69, 0x74, 0x22, 0x20, 0x63, 0x6f,
        0x6d, 0x70, 0x61, 0x74, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
        0x2e, 0x0a, 0x2d, 0x2d, 0x0a, 0x0a, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x20,
        0x3d, 0x20, 0x7b, 0x7d, 0x20, 0x2d, 0x2d, 0x20, 0x4c, 0x75, 0x61, 0x42,
        0x69, 0x74, 0x4f, 0x70, 0x20, 0x22, 0x62, 0x69, 0x74, 0x22, 0x20, 0x63,
        0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
        0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d,
        0x2e, 0x62, 0x69, 0x74, 0x2e, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x28, 0x78,
        0x29, 0x0a, 0x20, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x78, 0x20, 0x25, 0x20,
        0x4d, 0x4f, 0x44, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x78, 0x20, 0x3e,
        0x3d, 0x20, 0x30, 0x78, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x78, 0x20,
        0x2d, 0x20, 0x4d, 0x4f, 0x44, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x20,
        0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x78, 0x0a, 0x65, 0x6e, 0x64,
        0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74,
        0x6f, 0x62, 0x69, 0x74, 0x20, 0x3d, 0x20, 0x4d, 0x2e, 0x62, 0x69, 0x74,
        0x2e, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63,
        0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x74,
        0x6f, 0x68, 0x65, 0x78, 0x28, 0x78, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29,
        0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x6f,
        0x68, 0x65, 0x78, 0x28, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c,
        0x20, 0x2e, 0x2e, 0x2e, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x66,
        0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x69,
        0x74, 0x2e, 0x62, 0x6e, 0x6f, 0x74, 0x28, 0x78, 0x29, 0x0a, 0x20, 0x20,
        0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74,
        0x6f, 0x62, 0x69, 0x74, 0x28, 0x62, 0x6e, 0x6f, 0x74, 0x28, 0x78, 0x20,
        0x25, 0x20, 0x4d, 0x4f, 0x44, 0x29, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a,
        0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,
        0x69, 0x6f, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x72, 0x28,
        0x61, 0x2c, 0x20, 0x62, 0x2c, 0x20, 0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e,
        0x29, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x63, 0x20, 0x74, 0x68, 0x65,
        0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x62, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x72, 0x28, 0x62, 0x69, 0x74,
        0x5f, 0x62, 0x6f, 0x72, 0x28, 0x61, 0x2c, 0x20, 0x62, 0x29, 0x2c, 0x20,
        0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29, 0x0a, 0x20, 0x20, 0x65, 0x6c,
        0x73, 0x65, 0x69, 0x66, 0x20, 0x62, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a,
        0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62,
        0x69, 0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x28, 0x62, 0x6f, 0x72,
        0x28, 0x61, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c, 0x20, 0x62, 0x20,
        0x25, 0x20, 0x4d, 0x4f, 0x44, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x65, 0x6c,
        0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
        0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x28,
        0x61, 0x29, 0x0a, 0x20, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x65, 0x6e, 0x64,
        0x0a, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x62, 0x6f, 0x72, 0x20, 0x3d,
        0x20, 0x62, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x72, 0x0a, 0x0a, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
        0x20, 0x62, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x28, 0x61, 0x2c,
        0x20, 0x62, 0x2c, 0x20, 0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29, 0x0a,
        0x20, 0x20, 0x69, 0x66, 0x20, 0x63, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a,
        0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62,
        0x69, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x28, 0x62, 0x69, 0x74, 0x5f,
        0x62, 0x61, 0x6e, 0x64, 0x28, 0x61, 0x2c, 0x20, 0x62, 0x29, 0x2c, 0x20,
        0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29, 0x0a, 0x20, 0x20, 0x65, 0x6c,
        0x73, 0x65, 0x69, 0x66, 0x20, 0x62, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0a,
        0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62,
        0x69, 0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x28, 0x62, 0x61, 0x6e,
        0x64, 0x28, 0x61, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c, 0x20, 0x62,
        0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x65,
        0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75,
        0x72, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x74,
        0x28, 0x61, 0x29, 0x0a, 0x20, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x65, 0x6e,
        0x64, 0x0a, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x62, 0x61, 0x6e, 0x64,
        0x20, 0x3d, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x0a,
        0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,
        0x69, 0x6f, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x62, 0x78, 0x6f, 0x72,
        0x28, 0x61, 0x2c, 0x20, 0x62, 0x2c, 0x20, 0x63, 0x2c, 0x20, 0x2e, 0x2e,
        0x2e, 0x29, 0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x63, 0x20, 0x74, 0x68,
        0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
        0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x62, 0x78, 0x6f, 0x72, 0x28, 0x62,
        0x69, 0x74, 0x5f, 0x62, 0x78, 0x6f, 0x72, 0x28, 0x61, 0x2c, 0x20, 0x62,
        0x29, 0x2c, 0x20, 0x63, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x29, 0x0a, 0x20,
        0x20, 0x65, 0x6c, 0x73, 0x65, 0x69, 0x66, 0x20, 0x62, 0x20, 0x74, 0x68,
        0x65, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
        0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x28,
        0x62, 0x78, 0x6f, 0x72, 0x28, 0x61, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44,
        0x2c, 0x20, 0x62, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x29, 0x29, 0x0a,
        0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72,
        0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x6f,
        0x62, 0x69, 0x74, 0x28, 0x61, 0x29, 0x0a, 0x20, 0x20, 0x65, 0x6e, 0x64,
        0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x62,
        0x78, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x62, 0x78,
        0x6f, 0x72, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
        0x20, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x6c, 0x73, 0x68, 0x69, 0x66,
        0x74, 0x28, 0x78, 0x2c, 0x20, 0x6e, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65,
        0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x62,
        0x69, 0x74, 0x28, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x20,
        0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c, 0x20, 0x6e, 0x20, 0x25, 0x20, 0x33,
        0x32, 0x29, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x66, 0x75, 0x6e,
        0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x2e,
        0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x2c, 0x20, 0x6e, 0x29,
        0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x69,
        0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x28, 0x72, 0x73, 0x68, 0x69,
        0x66, 0x74, 0x28, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c, 0x20,
        0x6e, 0x20, 0x25, 0x20, 0x33, 0x32, 0x29, 0x29, 0x0a, 0x65, 0x6e, 0x64,
        0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d,
        0x2e, 0x62, 0x69, 0x74, 0x2e, 0x61, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74,
        0x28, 0x78, 0x2c, 0x20, 0x6e, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74,
        0x75, 0x72, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69,
        0x74, 0x28, 0x61, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x28, 0x78, 0x20,
        0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c, 0x20, 0x6e, 0x20, 0x25, 0x20, 0x33,
        0x32, 0x29, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x66, 0x75, 0x6e,
        0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62, 0x69, 0x74, 0x2e,
        0x72, 0x6f, 0x6c, 0x28, 0x78, 0x2c, 0x20, 0x6e, 0x29, 0x0a, 0x20, 0x20,
        0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x5f, 0x74,
        0x6f, 0x62, 0x69, 0x74, 0x28, 0x6c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
        0x28, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c, 0x20, 0x6e, 0x20,
        0x25, 0x20, 0x33, 0x32, 0x29, 0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a,
        0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x2e, 0x62,
        0x69, 0x74, 0x2e, 0x72, 0x6f, 0x72, 0x28, 0x78, 0x2c, 0x20, 0x6e, 0x29,
        0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x62, 0x69,
        0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x28, 0x72, 0x72, 0x6f, 0x74,
        0x61, 0x74, 0x65, 0x28, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x2c,
        0x20, 0x6e, 0x20, 0x25, 0x20, 0x33, 0x32, 0x29, 0x29, 0x0a, 0x65, 0x6e,
        0x64, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
        0x4d, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x62, 0x73, 0x77, 0x61, 0x70, 0x28,
        0x78, 0x29, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
        0x62, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x62, 0x69, 0x74, 0x28, 0x62, 0x73,
        0x77, 0x61, 0x70, 0x28, 0x78, 0x20, 0x25, 0x20, 0x4d, 0x4f, 0x44, 0x29,
        0x29, 0x0a, 0x65, 0x6e, 0x64, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
        0x6e, 0x20, 0x4d, 0x0a,
        0x0
    };
        
        
    bool LoadGTCoreScriptLibrary(Script &script)
    {
        bool result = true;

        // We don't do anything if we're already loaded.
        if (!script.GetBoolean("__IsGTLoaded"))
        {
            // If we don't have a "bit" object, it means we'll need to load it. We will have one when compiling with LuaJIT, but not otherwise.
            script.GetGlobal("bit");
            if (script.IsNil(-1))
            {
                result = result && script.Execute(numberlua, 1);   // The main bitfield operation.
                if (result && script.IsTable(-1))
                {
                    script.Push("bit");
                    script.GetTableValue(-2);
                    script.SetGlobal("bit");
                }
            }
            script.Pop(1);  // bit


            // GT = {}
            script.PushNewTable();
            {
                ///////////////////////////////////////
                // Global Variables (in the GT namespace)

                script.SetTableValue(-1, "NullPtr", ((void*)0));


                ///////////////////////////////////////
                // Global Functions

                script.SetTableFunction(-1, "GetDirectoryContents", FFI::GetDirectoryContents);
                script.SetTableFunction(-1, "ToRelativePath",       FFI::ToRelativePath);



                ///////////////////////////////////////
                // General Extended Library

                // GT.table = {}
                script.Push("table");
                script.PushNewTable();
                {
                }
                script.SetTableValue(-3);

                // GT.math = {}
                script.Push("math");
                script.PushNewTable();
                {
                }
                script.SetTableValue(-3);



                ///////////////////////////////////////
                // IO Library

                // GT.IO = {}
                script.Push("IO");
                script.PushNewTable();
                {
                    script.SetTableFunction(-1, "__GetFileInfo",          FFI::IOFFI::__GetFileInfo);
                    script.SetTableFunction(-1, "GetParentDirectoryPath", FFI::IOFFI::GetParentDirectoryPath);
                    script.SetTableFunction(-1, "GetFileNameFromPath",    FFI::IOFFI::GetFileNameFromPath);
                    script.SetTableFunction(-1, "GetExtension",           FFI::IOFFI::GetExtension);
                    script.SetTableFunction(-1, "RemoveExtension",        FFI::IOFFI::RemoveExtension);
                    script.SetTableFunction(-1, "FileExists",             FFI::IOFFI::FileExists);
                    script.SetTableFunction(-1, "CreateDirectory",        FFI::IOFFI::CreateDirectory);
                    script.SetTableFunction(-1, "DeleteDirectory",        FFI::IOFFI::DeleteDirectory);
                    script.SetTableFunction(-1, "CreateEmptyFile",        FFI::IOFFI::CreateEmptyFile);
                    script.SetTableFunction(-1, "DeleteFile",             FFI::IOFFI::DeleteFile);
                }
                script.SetTableValue(-3);


                ///////////////////////////////////////
                // Timing Library

                // GT.Timing = {}
                script.Push("Timing");
                script.PushNewTable();
                {
                    script.SetTableFunction(-1, "GetTimeInSeconds",      FFI::TimingFFI::GetTimeInSeconds);
                    script.SetTableFunction(-1, "GetTimeInMilliseconds", FFI::TimingFFI::GetTimeInMilliseconds);
                }
                script.SetTableValue(-3);


                ///////////////////////////////////////
                // System Library

                // GT.System = {}
                script.Push("System");
                script.PushNewTable();
                {
                    script.SetTableFunction(-1, "OpenFileOrURL", FFI::SystemFFI::OpenFileOrURL);
                }
                script.SetTableValue(-3);


                ///////////////////////////////////////
                // Debugging Library

                // GT.Debugging = {}
                script.Push("Debugging");
                script.PushNewTable();
                {
                    script.SetTableFunction(-1, "Breakpoint",     FFI::DebuggingFFI::Breakpoint);
                    script.SetTableFunction(-1, "PrintCallStack", FFI::DebuggingFFI::PrintCallStack);
                }
                script.SetTableValue(-3);



                ///////////////////////////////////////
                // Keyboard / Mouse Library

                // GT.Keys = {}
                script.Push("Keys");
                script.PushNewTable();
                {
                    // This list of keys is already defined in Keys.hpp. We can do a Find and Replace on that list to quickly generate this one:
                    //
                    // 1) Copy and paste the content inside the GTLib::Keys namespace exactly as is
                    // 2) Run the following Find and Replace in Visual Studio 2013 (might need slight modification in other versions)
                    //        Find:    const char32_t ([^ ]*)(.*)=.*
                    //        Replace: script.Push("$1");$2script.Push(static_cast<int>(GTLib::Keys::$1));$2script.SetTableValue(-3);
                    //
                    // Be sure to use "Selection" for the Look In option - don't want to accidentally run it on the entire project or anything.

                    script.Push("Null");         script.Push(static_cast<int>(GTLib::Keys::Null));         script.SetTableValue(-3);

                    // ASCII
                    script.Push("Backspace");    script.Push(static_cast<int>(GTLib::Keys::Backspace));    script.SetTableValue(-3);
                    script.Push("Tab");          script.Push(static_cast<int>(GTLib::Keys::Tab));          script.SetTableValue(-3);
                    script.Push("Return");       script.Push(static_cast<int>(GTLib::Keys::Return));       script.SetTableValue(-3);
                    script.Push("Enter");        script.Push(static_cast<int>(GTLib::Keys::Enter));        script.SetTableValue(-3);
                    script.Push("Escape");       script.Push(static_cast<int>(GTLib::Keys::Escape));       script.SetTableValue(-3);
                    script.Push("Space");        script.Push(static_cast<int>(GTLib::Keys::Space));        script.SetTableValue(-3);
                    script.Push("Exclamation");  script.Push(static_cast<int>(GTLib::Keys::Exclamation));  script.SetTableValue(-3);
                    script.Push("DoubleQuote");  script.Push(static_cast<int>(GTLib::Keys::DoubleQuote));  script.SetTableValue(-3);
                    script.Push("Hash");         script.Push(static_cast<int>(GTLib::Keys::Hash));         script.SetTableValue(-3);
                    script.Push("Dollar");       script.Push(static_cast<int>(GTLib::Keys::Dollar));       script.SetTableValue(-3);
                    script.Push("Percent");      script.Push(static_cast<int>(GTLib::Keys::Percent));      script.SetTableValue(-3);
                    script.Push("Ampersand");    script.Push(static_cast<int>(GTLib::Keys::Ampersand));    script.SetTableValue(-3);
                    script.Push("Apostrophe");   script.Push(static_cast<int>(GTLib::Keys::Apostrophe));   script.SetTableValue(-3);
                    script.Push("ParanLeft");    script.Push(static_cast<int>(GTLib::Keys::ParanLeft));    script.SetTableValue(-3);
                    script.Push("ParanRight");   script.Push(static_cast<int>(GTLib::Keys::ParanRight));   script.SetTableValue(-3);
                    script.Push("Asterisk");     script.Push(static_cast<int>(GTLib::Keys::Asterisk));     script.SetTableValue(-3);
                    script.Push("Plus");         script.Push(static_cast<int>(GTLib::Keys::Plus));         script.SetTableValue(-3);
                    script.Push("Comma");        script.Push(static_cast<int>(GTLib::Keys::Comma));        script.SetTableValue(-3);
                    script.Push("Minus");        script.Push(static_cast<int>(GTLib::Keys::Minus));        script.SetTableValue(-3);
                    script.Push("Period");       script.Push(static_cast<int>(GTLib::Keys::Period));       script.SetTableValue(-3);
                    script.Push("Slash");        script.Push(static_cast<int>(GTLib::Keys::Slash));        script.SetTableValue(-3);
                    script.Push("Zero");         script.Push(static_cast<int>(GTLib::Keys::Zero));         script.SetTableValue(-3);
                    script.Push("One");          script.Push(static_cast<int>(GTLib::Keys::One));          script.SetTableValue(-3);
                    script.Push("Two");          script.Push(static_cast<int>(GTLib::Keys::Two));          script.SetTableValue(-3);
                    script.Push("Three");        script.Push(static_cast<int>(GTLib::Keys::Three));        script.SetTableValue(-3);
                    script.Push("Four");         script.Push(static_cast<int>(GTLib::Keys::Four));         script.SetTableValue(-3);
                    script.Push("Five");         script.Push(static_cast<int>(GTLib::Keys::Five));         script.SetTableValue(-3);
                    script.Push("Six");          script.Push(static_cast<int>(GTLib::Keys::Six));          script.SetTableValue(-3);
                    script.Push("Seven");        script.Push(static_cast<int>(GTLib::Keys::Seven));        script.SetTableValue(-3);
                    script.Push("Eight");        script.Push(static_cast<int>(GTLib::Keys::Eight));        script.SetTableValue(-3);
                    script.Push("Nine");         script.Push(static_cast<int>(GTLib::Keys::Nine));         script.SetTableValue(-3);
                    script.Push("Colon");        script.Push(static_cast<int>(GTLib::Keys::Colon));        script.SetTableValue(-3);
                    script.Push("Semicolon");    script.Push(static_cast<int>(GTLib::Keys::Semicolon));    script.SetTableValue(-3);
                    script.Push("Less");         script.Push(static_cast<int>(GTLib::Keys::Less));         script.SetTableValue(-3);
                    script.Push("Equal");        script.Push(static_cast<int>(GTLib::Keys::Equal));        script.SetTableValue(-3);
                    script.Push("Greater");      script.Push(static_cast<int>(GTLib::Keys::Greater));      script.SetTableValue(-3);
                    script.Push("Question");     script.Push(static_cast<int>(GTLib::Keys::Question));     script.SetTableValue(-3);
                    script.Push("At");           script.Push(static_cast<int>(GTLib::Keys::At));           script.SetTableValue(-3);
                    script.Push("A");            script.Push(static_cast<int>(GTLib::Keys::A));            script.SetTableValue(-3);
                    script.Push("B");            script.Push(static_cast<int>(GTLib::Keys::B));            script.SetTableValue(-3);
                    script.Push("C");            script.Push(static_cast<int>(GTLib::Keys::C));            script.SetTableValue(-3);
                    script.Push("D");            script.Push(static_cast<int>(GTLib::Keys::D));            script.SetTableValue(-3);
                    script.Push("E");            script.Push(static_cast<int>(GTLib::Keys::E));            script.SetTableValue(-3);
                    script.Push("F");            script.Push(static_cast<int>(GTLib::Keys::F));            script.SetTableValue(-3);
                    script.Push("G");            script.Push(static_cast<int>(GTLib::Keys::G));            script.SetTableValue(-3);
                    script.Push("H");            script.Push(static_cast<int>(GTLib::Keys::H));            script.SetTableValue(-3);
                    script.Push("I");            script.Push(static_cast<int>(GTLib::Keys::I));            script.SetTableValue(-3);
                    script.Push("J");            script.Push(static_cast<int>(GTLib::Keys::J));            script.SetTableValue(-3);
                    script.Push("K");            script.Push(static_cast<int>(GTLib::Keys::K));            script.SetTableValue(-3);
                    script.Push("L");            script.Push(static_cast<int>(GTLib::Keys::L));            script.SetTableValue(-3);
                    script.Push("M");            script.Push(static_cast<int>(GTLib::Keys::M));            script.SetTableValue(-3);
                    script.Push("N");            script.Push(static_cast<int>(GTLib::Keys::N));            script.SetTableValue(-3);
                    script.Push("O");            script.Push(static_cast<int>(GTLib::Keys::O));            script.SetTableValue(-3);
                    script.Push("P");            script.Push(static_cast<int>(GTLib::Keys::P));            script.SetTableValue(-3);
                    script.Push("Q");            script.Push(static_cast<int>(GTLib::Keys::Q));            script.SetTableValue(-3);
                    script.Push("R");            script.Push(static_cast<int>(GTLib::Keys::R));            script.SetTableValue(-3);
                    script.Push("S");            script.Push(static_cast<int>(GTLib::Keys::S));            script.SetTableValue(-3);
                    script.Push("T");            script.Push(static_cast<int>(GTLib::Keys::T));            script.SetTableValue(-3);
                    script.Push("U");            script.Push(static_cast<int>(GTLib::Keys::U));            script.SetTableValue(-3);
                    script.Push("V");            script.Push(static_cast<int>(GTLib::Keys::V));            script.SetTableValue(-3);
                    script.Push("W");            script.Push(static_cast<int>(GTLib::Keys::W));            script.SetTableValue(-3);
                    script.Push("X");            script.Push(static_cast<int>(GTLib::Keys::X));            script.SetTableValue(-3);
                    script.Push("Y");            script.Push(static_cast<int>(GTLib::Keys::Y));            script.SetTableValue(-3);
                    script.Push("Z");            script.Push(static_cast<int>(GTLib::Keys::Z));            script.SetTableValue(-3);
                    script.Push("LeftBracket");  script.Push(static_cast<int>(GTLib::Keys::LeftBracket));  script.SetTableValue(-3);
                    script.Push("BackSlash");    script.Push(static_cast<int>(GTLib::Keys::BackSlash));    script.SetTableValue(-3);
                    script.Push("RightBracket"); script.Push(static_cast<int>(GTLib::Keys::RightBracket)); script.SetTableValue(-3);
                    script.Push("CircumAccent"); script.Push(static_cast<int>(GTLib::Keys::CircumAccent)); script.SetTableValue(-3);
                    script.Push("Underscore");   script.Push(static_cast<int>(GTLib::Keys::Underscore));   script.SetTableValue(-3);
                    script.Push("GraveAccent");  script.Push(static_cast<int>(GTLib::Keys::GraveAccent));  script.SetTableValue(-3);
                    script.Push("a");            script.Push(static_cast<int>(GTLib::Keys::a));            script.SetTableValue(-3);
                    script.Push("b");            script.Push(static_cast<int>(GTLib::Keys::b));            script.SetTableValue(-3);
                    script.Push("c");            script.Push(static_cast<int>(GTLib::Keys::c));            script.SetTableValue(-3);
                    script.Push("d");            script.Push(static_cast<int>(GTLib::Keys::d));            script.SetTableValue(-3);
                    script.Push("e");            script.Push(static_cast<int>(GTLib::Keys::e));            script.SetTableValue(-3);
                    script.Push("f");            script.Push(static_cast<int>(GTLib::Keys::f));            script.SetTableValue(-3);
                    script.Push("g");            script.Push(static_cast<int>(GTLib::Keys::g));            script.SetTableValue(-3);
                    script.Push("h");            script.Push(static_cast<int>(GTLib::Keys::h));            script.SetTableValue(-3);
                    script.Push("i");            script.Push(static_cast<int>(GTLib::Keys::i));            script.SetTableValue(-3);
                    script.Push("j");            script.Push(static_cast<int>(GTLib::Keys::j));            script.SetTableValue(-3);
                    script.Push("k");            script.Push(static_cast<int>(GTLib::Keys::k));            script.SetTableValue(-3);
                    script.Push("l");            script.Push(static_cast<int>(GTLib::Keys::l));            script.SetTableValue(-3);
                    script.Push("m");            script.Push(static_cast<int>(GTLib::Keys::m));            script.SetTableValue(-3);
                    script.Push("n");            script.Push(static_cast<int>(GTLib::Keys::n));            script.SetTableValue(-3);
                    script.Push("o");            script.Push(static_cast<int>(GTLib::Keys::o));            script.SetTableValue(-3);
                    script.Push("p");            script.Push(static_cast<int>(GTLib::Keys::p));            script.SetTableValue(-3);
                    script.Push("q");            script.Push(static_cast<int>(GTLib::Keys::q));            script.SetTableValue(-3);
                    script.Push("r");            script.Push(static_cast<int>(GTLib::Keys::r));            script.SetTableValue(-3);
                    script.Push("s");            script.Push(static_cast<int>(GTLib::Keys::s));            script.SetTableValue(-3);
                    script.Push("t");            script.Push(static_cast<int>(GTLib::Keys::t));            script.SetTableValue(-3);
                    script.Push("u");            script.Push(static_cast<int>(GTLib::Keys::u));            script.SetTableValue(-3);
                    script.Push("v");            script.Push(static_cast<int>(GTLib::Keys::v));            script.SetTableValue(-3);
                    script.Push("w");            script.Push(static_cast<int>(GTLib::Keys::w));            script.SetTableValue(-3);
                    script.Push("x");            script.Push(static_cast<int>(GTLib::Keys::x));            script.SetTableValue(-3);
                    script.Push("y");            script.Push(static_cast<int>(GTLib::Keys::y));            script.SetTableValue(-3);
                    script.Push("z");            script.Push(static_cast<int>(GTLib::Keys::z));            script.SetTableValue(-3);
                    script.Push("LeftBrace");    script.Push(static_cast<int>(GTLib::Keys::LeftBrace));    script.SetTableValue(-3);
                    script.Push("Bar");          script.Push(static_cast<int>(GTLib::Keys::Bar));          script.SetTableValue(-3);
                    script.Push("RightBrace");   script.Push(static_cast<int>(GTLib::Keys::RightBrace));   script.SetTableValue(-3);
                    script.Push("Tilde");        script.Push(static_cast<int>(GTLib::Keys::Tilde));        script.SetTableValue(-3);
                    script.Push("Delete");       script.Push(static_cast<int>(GTLib::Keys::Delete));       script.SetTableValue(-3);

                    script.Push("Pause");        script.Push(static_cast<int>(GTLib::Keys::Pause));        script.SetTableValue(-3);
                    script.Push("ScrollLock");   script.Push(static_cast<int>(GTLib::Keys::ScrollLock));   script.SetTableValue(-3);

                    // Non-printable keyboard keys. These are on the PUA in plane 15.
                    script.Push("Shift");        script.Push(static_cast<int>(GTLib::Keys::Shift));        script.SetTableValue(-3);
                    script.Push("Ctrl");         script.Push(static_cast<int>(GTLib::Keys::Ctrl));         script.SetTableValue(-3);
                    script.Push("Alt");          script.Push(static_cast<int>(GTLib::Keys::Alt));          script.SetTableValue(-3);
                    script.Push("Super");        script.Push(static_cast<int>(GTLib::Keys::Super));        script.SetTableValue(-3);
                    script.Push("CapsLock");     script.Push(static_cast<int>(GTLib::Keys::CapsLock));     script.SetTableValue(-3);

                    script.Push("ArrowLeft");    script.Push(static_cast<int>(GTLib::Keys::ArrowLeft));    script.SetTableValue(-3);
                    script.Push("ArrowRight");   script.Push(static_cast<int>(GTLib::Keys::ArrowRight));   script.SetTableValue(-3);
                    script.Push("ArrowUp");      script.Push(static_cast<int>(GTLib::Keys::ArrowUp));      script.SetTableValue(-3);
                    script.Push("ArrowDown");    script.Push(static_cast<int>(GTLib::Keys::ArrowDown));    script.SetTableValue(-3);

                    script.Push("F1");           script.Push(static_cast<int>(GTLib::Keys::F1));           script.SetTableValue(-3);
                    script.Push("F2");           script.Push(static_cast<int>(GTLib::Keys::F2));           script.SetTableValue(-3);
                    script.Push("F3");           script.Push(static_cast<int>(GTLib::Keys::F3));           script.SetTableValue(-3);
                    script.Push("F4");           script.Push(static_cast<int>(GTLib::Keys::F4));           script.SetTableValue(-3);
                    script.Push("F5");           script.Push(static_cast<int>(GTLib::Keys::F5));           script.SetTableValue(-3);
                    script.Push("F6");           script.Push(static_cast<int>(GTLib::Keys::F6));           script.SetTableValue(-3);
                    script.Push("F7");           script.Push(static_cast<int>(GTLib::Keys::F7));           script.SetTableValue(-3);
                    script.Push("F8");           script.Push(static_cast<int>(GTLib::Keys::F8));           script.SetTableValue(-3);
                    script.Push("F9");           script.Push(static_cast<int>(GTLib::Keys::F9));           script.SetTableValue(-3);
                    script.Push("F10");          script.Push(static_cast<int>(GTLib::Keys::F10));          script.SetTableValue(-3);
                    script.Push("F11");          script.Push(static_cast<int>(GTLib::Keys::F11));          script.SetTableValue(-3);
                    script.Push("F12");          script.Push(static_cast<int>(GTLib::Keys::F12));          script.SetTableValue(-3);
                    script.Push("F13");          script.Push(static_cast<int>(GTLib::Keys::F13));          script.SetTableValue(-3);
                    script.Push("F14");          script.Push(static_cast<int>(GTLib::Keys::F14));          script.SetTableValue(-3);
                    script.Push("F15");          script.Push(static_cast<int>(GTLib::Keys::F15));          script.SetTableValue(-3);
                    script.Push("F16");          script.Push(static_cast<int>(GTLib::Keys::F16));          script.SetTableValue(-3);
                    script.Push("F17");          script.Push(static_cast<int>(GTLib::Keys::F17));          script.SetTableValue(-3);
                    script.Push("F18");          script.Push(static_cast<int>(GTLib::Keys::F18));          script.SetTableValue(-3);
                    script.Push("F19");          script.Push(static_cast<int>(GTLib::Keys::F19));          script.SetTableValue(-3);
                    script.Push("F20");          script.Push(static_cast<int>(GTLib::Keys::F20));          script.SetTableValue(-3);
                    script.Push("F21");          script.Push(static_cast<int>(GTLib::Keys::F21));          script.SetTableValue(-3);
                    script.Push("F22");          script.Push(static_cast<int>(GTLib::Keys::F22));          script.SetTableValue(-3);
                    script.Push("F23");          script.Push(static_cast<int>(GTLib::Keys::F23));          script.SetTableValue(-3);
                    script.Push("F24");          script.Push(static_cast<int>(GTLib::Keys::F24));          script.SetTableValue(-3);

                    script.Push("End");          script.Push(static_cast<int>(GTLib::Keys::End));          script.SetTableValue(-3);
                    script.Push("Home");         script.Push(static_cast<int>(GTLib::Keys::Home));         script.SetTableValue(-3);
                    script.Push("PageUp");       script.Push(static_cast<int>(GTLib::Keys::PageUp));       script.SetTableValue(-3);
                    script.Push("PageDown");     script.Push(static_cast<int>(GTLib::Keys::PageDown));     script.SetTableValue(-3);

                    script.Push("Select");       script.Push(static_cast<int>(GTLib::Keys::Select));       script.SetTableValue(-3);
                    script.Push("Print");        script.Push(static_cast<int>(GTLib::Keys::Print));        script.SetTableValue(-3);
                    script.Push("Execute");      script.Push(static_cast<int>(GTLib::Keys::Execute));      script.SetTableValue(-3);
                    script.Push("Insert");       script.Push(static_cast<int>(GTLib::Keys::Insert));       script.SetTableValue(-3);
                    script.Push("Undo");         script.Push(static_cast<int>(GTLib::Keys::Undo));         script.SetTableValue(-3);
                    script.Push("Redo");         script.Push(static_cast<int>(GTLib::Keys::Redo));         script.SetTableValue(-3);
                    script.Push("Menu");         script.Push(static_cast<int>(GTLib::Keys::Menu));         script.SetTableValue(-3);
                    script.Push("Find");         script.Push(static_cast<int>(GTLib::Keys::Find));         script.SetTableValue(-3);
                    script.Push("Cancel");       script.Push(static_cast<int>(GTLib::Keys::Cancel));       script.SetTableValue(-3);
                    script.Push("Help");         script.Push(static_cast<int>(GTLib::Keys::Help));         script.SetTableValue(-3);
                    script.Push("Break");        script.Push(static_cast<int>(GTLib::Keys::Break));        script.SetTableValue(-3);
                    script.Push("ModeSwitch");   script.Push(static_cast<int>(GTLib::Keys::ModeSwitch));   script.SetTableValue(-3);
                    script.Push("NumLock");      script.Push(static_cast<int>(GTLib::Keys::NumLock));      script.SetTableValue(-3);


                    // Aliases
                    script.Push("LeftRoundBracket");   script.Push(static_cast<int>(GTLib::Keys::LeftRoundBracket));   script.SetTableValue(-3);
                    script.Push("RightRoundBracket");  script.Push(static_cast<int>(GTLib::Keys::RightRoundBracket));  script.SetTableValue(-3);
                    script.Push("LeftSquareBracket");  script.Push(static_cast<int>(GTLib::Keys::LeftSquareBracket));  script.SetTableValue(-3);
                    script.Push("RightSquareBracket"); script.Push(static_cast<int>(GTLib::Keys::RightSquareBracket)); script.SetTableValue(-3);
                    script.Push("Grave");              script.Push(static_cast<int>(GTLib::Keys::Grave));              script.SetTableValue(-3);
                    script.Push("LeftCurlyBracket");   script.Push(static_cast<int>(GTLib::Keys::LeftCurlyBracket));   script.SetTableValue(-3);
                    script.Push("RightCurlyBracket");  script.Push(static_cast<int>(GTLib::Keys::RightCurlyBracket));  script.SetTableValue(-3);
                }
                script.SetTableValue(-3);


                // GT.math = {}
                script.Push("MouseButtons");
                script.PushNewTable();
                {
                    // This list of mouse buttons is already defined in MouseButtons.hpp. We can do a Find and Replace on that list to quickly generate this one:
                    //
                    // 1) Copy and paste the content inside the GTLib::MouseButtons enum exactly as is (not including the surrounding "enum { }".
                    // 2) Run the following Find and Replace in Visual Studio 2013 (might need slight modification in other versions)
                    //        Find:    .*_([^ ]*)(.*)=.*
                    //        Replace: script.Push("$1");$2script.Push(static_cast<int>(GTLib::MouseButton_$1));$2script.SetTableValue(-3);
                    //
                    // Be sure to use "Selection" for the Look In option - don't want to accidentally run it on the entire project or anything.

                    script.Push("Unknown"); script.Push(static_cast<int>(GTLib::MouseButton_Unknown)); script.SetTableValue(-3);

                    script.Push("Left");    script.Push(static_cast<int>(GTLib::MouseButton_Left));    script.SetTableValue(-3);
                    script.Push("Right");   script.Push(static_cast<int>(GTLib::MouseButton_Right));   script.SetTableValue(-3);
                    script.Push("Middle");  script.Push(static_cast<int>(GTLib::MouseButton_Middle));  script.SetTableValue(-3);
                }
                script.SetTableValue(-3);


                ///////////////////////////////////////
                // FFI

                // GT.FFI = {}
                script.Push("FFI");
                script.PushNewTable();
                {
                    ///////////////////////////////////////
                    // FFI Initialization.


                    // GT.FFI.Serializer = {}
                    script.Push("Serializer");
                    script.PushNewTable();
                    {
                        script.SetTableFunction(-1, "WriteInt8",     FFI::SerializerFFI::WriteInt8);
                        script.SetTableFunction(-1, "WriteInt16",    FFI::SerializerFFI::WriteInt16);
                        script.SetTableFunction(-1, "WriteInt32",    FFI::SerializerFFI::WriteInt32);
                        script.SetTableFunction(-1, "WriteFloat32",  FFI::SerializerFFI::WriteFloat32);
                        script.SetTableFunction(-1, "WriteFloat64",  FFI::SerializerFFI::WriteFloat64);
                        script.SetTableFunction(-1, "WriteBool",     FFI::SerializerFFI::WriteBool);
                        script.SetTableFunction(-1, "WriteString",   FFI::SerializerFFI::WriteString);
                    }
                    script.SetTableValue(-3);

                    // GT.FFI.Deserializer = {}
                    script.Push("Deserializer");
                    script.PushNewTable();
                    {
                        script.SetTableFunction(-1, "CreateFromFile", FFI::DeserializerFFI::CreateFromFile);
                        script.SetTableFunction(-1, "DeleteFromFile", FFI::DeserializerFFI::DeleteFromFile);
                        script.SetTableFunction(-1, "ReadInt8",       FFI::DeserializerFFI::ReadInt8);
                        script.SetTableFunction(-1, "ReadInt16",      FFI::DeserializerFFI::ReadInt16);
                        script.SetTableFunction(-1, "ReadInt32",      FFI::DeserializerFFI::ReadInt32);
                        script.SetTableFunction(-1, "ReadFloat32",    FFI::DeserializerFFI::ReadFloat32);
                        script.SetTableFunction(-1, "ReadFloat64",    FFI::DeserializerFFI::ReadFloat64);
                        script.SetTableFunction(-1, "ReadBool",       FFI::DeserializerFFI::ReadBool);
                        script.SetTableFunction(-1, "ReadString",     FFI::DeserializerFFI::ReadString);
                        script.SetTableFunction(-1, "StartChunk",     FFI::DeserializerFFI::StartChunk);
                        script.SetTableFunction(-1, "EndChunk",       FFI::DeserializerFFI::EndChunk);
                        script.SetTableFunction(-1, "HasRoomInChunk", FFI::DeserializerFFI::HasRoomInChunk);
                    }
                    script.SetTableValue(-3);
                }
                script.SetTableValue(-3);
            }
            script.SetGlobal("GT");


            // General extended library.
            result = result && script.Execute
            (
                "function GT.table.indexof(t, valuein)"
                "    for i,v in ipairs(t) do"
                "        if v == valuein then"
                "            return i;"
                "        end;"
                "    end;"
                "    return nil;"
                "end;"

                "function GT.table.shallowcopy(t)"
                "    local new = {};"
                "    for key,value in pairs(t) do"
                "        new[key] = value;"
                "    end"
                "    return new;"
                "end;"

                "function GT.table.ishallowcopy(t)"
                "    local new = {};"
                "    for key,value in ipairs(t) do"
                "        new[key] = value;"
                "    end"
                "    return new;"
                "end;"


                // Set theory: Union, Intersection, Difference. Assumes an indexed list, for now. This will only do a shallow copy of the values.

                // Union - t1 + t2 (excluding duplicates)
                "function GT.table.iunion(t1, t2)"
                "    local t3 = GT.table.ishallowcopy(t1);"
                "    for i,v in ipairs(t2) do"
                "        if GT.table.indexof(t3, v) == nil then"
                "            t3[#t3 + 1] = v;"
                "        end;"
                "    end;"
                "    return t3;"
                "end;"

                // Intersection: Everything that is contained in both t1 and t2
                "function GT.table.iintersection(t1, t2)"
                "    local t3 = {};"
                "    for i,v in ipairs(t1) do"
                "        if GT.table.indexof(t2, v) ~= nil then"
                "            t3[#t3 + 1] = v;"
                "        end;"
                "    end;"
                "    return t3;"
                "end;"

                // Difference: Everything that is in t1 that's not in t2
                "function GT.table.idifference(t1, t2)"
                "    local t3 = {};"
                "    for i,v in ipairs(t1) do"
                "        if GT.table.indexof(t2, v) == nil then"
                "            t3[#t3 + 1] = v;"
                "        end;"
                "    end;"
                "    return t3;"
                "end;"


                    
                // Extended math library. This is in the GT.math table.
                "function GT.math.clamp(x, min, max)"
	            "    if x > max then return max end;"
	            "    if x < min then return min end;"
	            "    return x;"
                "end;"
            );



            // CallbackManager
            result = result && script.Execute
            (
                "GT.CallbackManager = {};"
                "GT.CallbackManager.__index = GT.CallbackManager;"
                ""
                "function GT.CallbackManager:Create(id)"
                "    local new = {};"
                "    setmetatable(new, GT.CallbackManager);"
                "        new.callbacks = {};"
                "    return new;"
                "end;"
                ""
                "function GT.CallbackManager:Bind(name, callback)"
                "    if name and callback then"
                "        local callbackList = self.callbacks[name];"
                "        if callbackList == nil then"
                "            self.callbacks[name] = {};"
                "            callbackList = self.callbacks[name];"
                "        end;"
                "        if GT.table.indexof(callbackList, callback) == nil then"
                "            callbackList[#callbackList + 1] = callback;"
                "        end;"
                "    end;"
                "end;"
                ""
                "function GT.CallbackManager:Unbind(name, callback)"
                "    local callbackList = self.callbacks[name];"
                "    if callbackList then"
                "        for i, value in ipairs(callbackList) do"
                "            if value == callback then"
                "                table.remove(callbackList, i);"
                "                return;"
                "            end;"
                "        end;"
                "    end;"
                "end;"
                ""
                "function GT.CallbackManager:UnbindAll(name)"
                "    self.callbacks[name] = {};"
                "end;"
                ""
                "function GT.CallbackManager:Call(name, data)"
                "    local result = true;"
                "    local callbackList = self.callbacks[name];"
                "    if callbackList then"
                "        for i, value in ipairs(callbackList) do"
                "            if value and value(data) == false then"
                "                result = false;"
                "            end;"
                "        end;"
                "    end;"
                "    return result;"
                "end;"
                ""
                "function GT.CallbackManager:BindOrCall(name, arg)"
                "    if arg and type(arg) == 'function' then"
                "        self:Bind(name, arg);"
                "    else"
                "        self:Call(name, arg);"
                "    end;"
                "end;"
                ""
                "function GT.CallbackManager:Clear(name)"
                "    local callbacksList = self.callbacks[name];"
                "    if callbacksList then"
                "        self.callbacks[name] = {};"
                "    end;"
                "end;"
                ""
                "function GT.CallbackManager:ClearAll()"
                "    self.callbacks = {};"
                "end;"
            );


            // IO.FileInfo
            result = result && script.Execute
            (
                "GT.IO.FileInfo = {};"
                "GT.IO.FileInfo.__index = GT.IO.FileInfo;"
                    
                "function GT.IO.FileInfo.New(arg1)"
                "    local new = {};"
                "    setmetatable(new, GT.IO.FileInfo);"
                "        if arg1 ~= nil then"
                "            if type(arg1) == 'string' then"
                "                new.path,new.absolutePath,new.size,new.lastModifiedTime,new.isDirectory = GT.IO.__GetFileInfo(arg1);"
                "            else"
                "                new.path             = arg1.path;"
                "                new.absolutePath     = arg1.absolutePath;"
                "                new.size             = arg1.size;"
                "                new.lastModifiedTime = arg1.lastModifiedTime;"
                "                new.isDirectory      = arg1.isDirectory;"
                "            end;"
                "        else"
                "            new.path             = '';"
                "            new.absolutePath     = '';"
                "            new.size             = 0;"
                "            new.lastModifiedTime = 0;"
                "            new.isDirectory      = false;"
                "        end;"
                "    return new;"
                "end;"
            );


            // Serializer.
            result = result && script.Execute
            (
                "GT.Serializer = {};"
                "GT.Serializer.__index = GT.Serializer;"

                "function GT.Serializer.Create(serializerPtr)"
                "    local new = {};"
                "    setmetatable(new, GT.Serializer);"
                "        new._serializerPtr = serializerPtr;"
                "    return new;"
                "end;"

                "function GT.Serializer:WriteInt8(value)"
                "    GT.FFI.Serializer.WriteInt8(self._serializerPtr, value);"
                "end;"

                "function GT.Serializer:WriteInt16(value)"
                "    GT.FFI.Serializer.WriteInt16(self._serializerPtr, value);"
                "end;"

                "function GT.Serializer:WriteInt32(value)"
                "    GT.FFI.Serializer.WriteInt32(self._serializerPtr, value);"
                "end;"

                "function GT.Serializer:WriteFloat32(value)"
                "    GT.FFI.Serializer.WriteFloat32(self._serializerPtr, value);"
                "end;"

                "function GT.Serializer:WriteFloat64(value)"
                "    GT.FFI.Serializer.WriteFloat64(self._serializerPtr, value);"
                "end;"

                "function GT.Serializer:WriteBool(value)"
                "    GT.FFI.Serializer.WriteBool(self._serializerPtr, value);"
                "end;"

                "function GT.Serializer:WriteString(value)"
                "    GT.FFI.Serializer.WriteString(self._serializerPtr, value);"
                "end;"
            );

            // Deserializer.
            result = result && script.Execute
            (
                "GT.Deserializer = {};"
                "GT.Deserializer.__index = GT.Deserializer;"

                "function GT.Deserializer.Create(deserializerPtr)"
                "    local new = {};"
                "    setmetatable(new, GT.Deserializer);"
                "        new._deserializerPtr = deserializerPtr;"
                "    return new;"
                "end;"

                "function GT.Deserializer.CreateFromFile(filePath)"
                "    local deserializerPtr, filePtr = GT.FFI.Deserializer.CreateFromFile(filePath);"
                "    if deserializerPtr then"
                "        local new = GT.Deserializer.Create(deserializerPtr);"
                "            new._filePtr = filePtr"
                "            new._ownsPtr = true;"
                "        return new;"
                "    end;"
                ""
                "    return nil;"
                "end;"

                "function GT.Deserializer:Delete()"
                "    if self._deserializerPtr then"
                "        if self._ownsPtr then"
                "            if self._filePtr then"
                "                GT.FFI.Deserializer.DeleteFromFile(self._deserializerPtr, self._filePtr);"
                "            else"
                //"                GT.FFI.Deserializer.Delete(self._deserializerPtr);"
                "            end;"
                "        end;"
                "    end;"
                "end;"

                "function GT.Deserializer:ReadInt8(value)"
                "    return GT.FFI.Deserializer.ReadInt8(self._deserializerPtr, value);"
                "end;"

                "function GT.Deserializer:ReadInt16(value)"
                "    return GT.FFI.Deserializer.ReadInt16(self._deserializerPtr, value);"
                "end;"

                "function GT.Deserializer:ReadInt32(value)"
                "    return GT.FFI.Deserializer.ReadInt32(self._deserializerPtr, value);"
                "end;"

                "function GT.Deserializer:ReadFloat32(value)"
                "    return GT.FFI.Deserializer.ReadFloat32(self._deserializerPtr, value);"
                "end;"

                "function GT.Deserializer:ReadFloat64(value)"
                "    return GT.FFI.Deserializer.ReadFloat64(self._deserializerPtr, value);"
                "end;"

                "function GT.Deserializer:ReadBool(value)"
                "    return GT.FFI.Deserializer.ReadBool(self._deserializerPtr, value);"
                "end;"

                "function GT.Deserializer:ReadString(value)"
                "    return GT.FFI.Deserializer.ReadString(self._deserializerPtr, value);"
                "end;"


                "function GT.Deserializer.StartChunk(chunkSizeInBytes)"
                "    return GT.FFI.Deserializer.StartChunk(self._deserializerPtr, chunkSizeInBytes);"
                "end;"

                "function GT.Deserializer.EndChunk()"
                "    return GT.FFI.Deserializer.EndChunk(self._deserializerPtr);"
                "end;"

                "function GT.Deserializer.HasRoomInChunk(bytesToRead)"
                "    return GT.FFI.Deserializer.HasRoomInChunk(self._deserializerPtr, bytesToRead);"
                "end;"
            );


            // __IsGTLoaded = true
            script.Push(true);
            script.SetGlobal("__IsGTLoaded");
        }

        return result;
    }

    bool LoadGTEngineScriptLibrary(GT::Script &script)
    {
        bool successful = LoadExtendedMathLibrary(script);


        // GTEngine table.
        script.PushNewTable();
        {
            ///////////////////////////////////////////////////
            // GTEngine.Editor

            script.Push("Editor");
            script.PushNewTable();
            {
            }
            script.SetTableValue(-3);



            ///////////////////////////////////////////////////
            // GTEngine.System

            script.Push("System");
            script.PushNewTable();
            {
            }
            script.SetTableValue(-3);



            ///////////////////////////////////////////////////
            // GTEngine.Display

            script.Push("Display");
            script.PushNewTable();
            {
                script.SetTableValue(-1, "Width",      1280);
                script.SetTableValue(-1, "Height",     720);
                script.SetTableValue(-1, "Fullscreen", false);


                script.Push("Textures");
                script.PushNewTable();
                {
                    script.SetTableValue(-1, "Anisotropy", 16);
                }
                script.SetTableValue(-3);
            }
            script.SetTableValue(-3);



            ///////////////////////////////////////////////////
            // GTEngine.CollisionShapeTypes

            script.Push("CollisionShapeTypes");
            script.PushNewTable();
            {
                script.SetTableValue(-1, "None",             GTEngine::CollisionShapeType_None);
                script.SetTableValue(-1, "Box",              GTEngine::CollisionShapeType_Box);
                script.SetTableValue(-1, "Sphere",           GTEngine::CollisionShapeType_Sphere);
                script.SetTableValue(-1, "Ellipsoid",        GTEngine::CollisionShapeType_Ellipsoid);
                script.SetTableValue(-1, "CylinderX",        GTEngine::CollisionShapeType_CylinderX);
                script.SetTableValue(-1, "CylinderY",        GTEngine::CollisionShapeType_CylinderY);
                script.SetTableValue(-1, "CylinderZ",        GTEngine::CollisionShapeType_CylinderZ);
                script.SetTableValue(-1, "CapsuleX",         GTEngine::CollisionShapeType_CapsuleX);
                script.SetTableValue(-1, "CapsuleY",         GTEngine::CollisionShapeType_CapsuleY);
                script.SetTableValue(-1, "CapsuleZ",         GTEngine::CollisionShapeType_CapsuleZ);
                script.SetTableValue(-1, "ConvexHull",       GTEngine::CollisionShapeType_ConvexHull);
                script.SetTableValue(-1, "ModelConvexHulls", GTEngine::CollisionShapeType_ModelConvexHulls);       // A special type representing the case when the convex hulls from the model is being used.
            }
            script.SetTableValue(-3);



            ///////////////////////////////////////////////////
            // GTEngine.ScriptVariableTypes

            script.Push("ScriptVariableTypes");
            script.PushNewTable();
            {
                script.SetTableValue(-1, "Unknown", GTEngine::ScriptVariableType_Unknown);
                script.SetTableValue(-1, "None",    GTEngine::ScriptVariableType_None);
                script.SetTableValue(-1, "Number",  GTEngine::ScriptVariableType_Number);
                script.SetTableValue(-1, "Vec2",    GTEngine::ScriptVariableType_Vec2);
                script.SetTableValue(-1, "Vec3",    GTEngine::ScriptVariableType_Vec3);
                script.SetTableValue(-1, "Vec4",    GTEngine::ScriptVariableType_Vec4);
                script.SetTableValue(-1, "Boolean", GTEngine::ScriptVariableType_Boolean);
                script.SetTableValue(-1, "String",  GTEngine::ScriptVariableType_String);
                script.SetTableValue(-1, "Prefab",  GTEngine::ScriptVariableType_Prefab);
            }
            script.SetTableValue(-3);



            ///////////////////////////////////////////////////
            // GTEngine.ScriptVariableTypes

            script.Push("ShaderParameterTypes");
            script.PushNewTable();
            {
                script.SetTableValue(-1, "Float",       GTEngine::ShaderParameterType_Float);
                script.SetTableValue(-1, "Float2",      GTEngine::ShaderParameterType_Float2);
                script.SetTableValue(-1, "Float3",      GTEngine::ShaderParameterType_Float3);
                script.SetTableValue(-1, "Float4",      GTEngine::ShaderParameterType_Float4);
                script.SetTableValue(-1, "Integer",     GTEngine::ShaderParameterType_Integer);
                script.SetTableValue(-1, "Integer2",    GTEngine::ShaderParameterType_Integer2);
                script.SetTableValue(-1, "Integer3",    GTEngine::ShaderParameterType_Integer3);
                script.SetTableValue(-1, "Integer4",    GTEngine::ShaderParameterType_Integer4);
                script.SetTableValue(-1, "Float2x2",    GTEngine::ShaderParameterType_Float2x2);
                script.SetTableValue(-1, "Float3x3",    GTEngine::ShaderParameterType_Float3x3);
                script.SetTableValue(-1, "Float4x4",    GTEngine::ShaderParameterType_Float4x4);
                script.SetTableValue(-1, "Texture1D",   GTEngine::ShaderParameterType_Texture1D);
                script.SetTableValue(-1, "Texture2D",   GTEngine::ShaderParameterType_Texture2D);
                script.SetTableValue(-1, "Texture3D",   GTEngine::ShaderParameterType_Texture3D);
                script.SetTableValue(-1, "TextureCube", GTEngine::ShaderParameterType_TextureCube);
            }
            script.SetTableValue(-3);



            ///////////////////////////////////////////////////
            // GTEngine.<Misc>

            script.Push("ScriptDefinitions");
            script.PushNewTable();
            script.SetTableValue(-3);
        }
        script.SetGlobal("GTEngine");


        ///////////////////////////////////////////
        // GUI Helpers.

        successful = successful && script.Execute
        (
            "GTEngine.CreateGUIElement                        = GTGUI.Server.CreateElement;"
            "GTEngine.DeleteGUIElement                        = GTGUI.Server.DeleteElement;"
            "GTEngine.GetGUIElementByID                       = GTGUI.Server.GetElementByID;"
            "GTEngine.GetRootGUIElement                       = GTGUI.Server.GetRootElement;"
            "GTEngine.LoadGUIStyleScriptFromFile              = GTGUI.Server.LoadStyleScriptFromFile;"
            "GTEngine.SetGUIDragAndDropProxyElement           = GTGUI.Server.SetDragAndDropProxyElement;"
            "GTEngine.GetGUIDragAndDropProxyElement           = GTGUI.Server.GetDragAndDropProxyElement;"
            "GTEngine.RemoveCurrentGUIDragAndDropProxyElement = GTGUI.Server.RemoveCurrentDragAndDropProxyElement;"
            "GTEngine.SetGUIDragAndDropProxyElementOffset     = GTGUI.Server.SetDragAndDropProxyElementOffset;"
            "GTEngine.GetGUIViewportWidth                     = GTGUI.Server.GetViewportWidth;"
            "GTEngine.GetGUIViewportHeight                    = GTGUI.Server.SetDragAndDropProxyElementOffset;"

            "GTEngine.Keys = GTGUI.Keys;"
        );



        ///////////////////////////////////////////
        // CollisionGroupMask.

        successful = successful & script.Execute
        (
            "GTEngine.__CollisionGroupMask = {};"
            "GTEngine.__CollisionGroupMask.__index = GTEngine.__CollisionGroupMask;"

            "GTEngine.__CollisionGroupMask.Add = function(self, groupIndex)"
            "    if groupIndex == -1 then"
            "        self.bitfield = -1;"
            "    elseif groupIndex > 0 then"
            "        self.bitfield = bit.bor(self.bitfield, bit.lshift(1, groupIndex - 1));"
            "    end;"
            "end;"

            "GTEngine.__CollisionGroupMask.Remove = function(self, groupIndex)"
            "    if groupIndex == -1 then"
            "        self.bitfield = -1;"
            "    elseif groupIndex > 0 then"
            "        self.bitfield = bit.band(self.bitfield, bit.bswap(bit.lshift(1, groupIndex - 1)));"
            "    end;"
            "end;"

            "function GTEngine.CollisionGroupMask()"
            "    local new = {};"
            "    setmetatable(new, GTEngine.__CollisionGroupMask);"
            "        new.bitfield = 0;"
            "    return new;"
            "end;"
        );



        successful = successful && LoadRenderingLibrary(script);
        successful = successful && LoadAudioLibrary(script);
        successful = successful && LoadSceneLibrary(script);
        successful = successful && LoadSceneNodeLibrary(script);
        successful = successful && LoadComponentsLibrary(script);
        successful = successful && LoadParticlesLibrary(script);
        successful = successful && LoadEditorLibrary(script);
        successful = successful && LoadAnimationLibrary(script);



        // Here we load the FFI.
        script.GetGlobal("GTEngine");
        if (script.IsTable(-1))
        {
            script.SetTableFunction(-1, "GetExecutableDirectory", FFI::GetExecutableDirectory);
            script.SetTableFunction(-1, "GetVersionString",       FFI::GetVersionString);

            script.SetTableFunction(-1, "IsModelFile",        FFI::IsModelFile);
            script.SetTableFunction(-1, "IsImageFile",        FFI::IsImageFile);
            script.SetTableFunction(-1, "IsSoundFile",        FFI::IsSoundFile);
            script.SetTableFunction(-1, "IsSceneFile",        FFI::IsSceneFile);
            script.SetTableFunction(-1, "IsPrefabFile",       FFI::IsPrefabFile);
            script.SetTableFunction(-1, "IsScriptFile",       FFI::IsScriptFile);

            script.SetTableFunction(-1, "CreatePrefab",       FFI::CreatePrefab);

            script.SetTableFunction(-1, "ExecuteFile",        FFI::ExecuteFile);
            script.SetTableFunction(-1, "ExecuteScript",      FFI::ExecuteScript);
            script.SetTableFunction(-1, "GetLastScriptError", FFI::GetLastScriptError);

            script.SetTableFunction(-1, "RandomInteger",      FFI::RandomInteger);
            script.SetTableFunction(-1, "RandomFloat",        FFI::RandomFloat);
        }
        script.Pop(1);

        return successful;
    }




    void PushNewSerializer(Script &script, GTLib::Serializer &serializer)
    {
        script.GetGlobal("GT");
        assert(script.IsTable(-1));
        {
            script.Push("Serializer");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                script.Push("Create");
                script.GetTableValue(-2);
                assert(script.IsFunction(-1));
                {
                    script.Push(&serializer);
                    script.Call(1, 1);      // 1 argument, 1 return value.

                    // The return value needs to be moved below GT and GT.Serializer because they are going to get popped.
                    script.InsertIntoStack(-3);
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PushNewDeserializer(Script &script, GTLib::Deserializer &deserializer)
    {
        script.GetGlobal("GT");
        assert(script.IsTable(-1));
        {
            script.Push("Deserializer");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                script.Push("Create");
                script.GetTableValue(-2);
                assert(script.IsFunction(-1));
                {
                    script.Push(&deserializer);
                    script.Call(1, 1);      // 1 argument, 1 return value.

                    // The return value needs to be moved below GT and GT.Serializer because they are going to get popped.
                    script.InsertIntoStack(-3);
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }





    void PostEvent_OnMouseMove(GT::Script &script, int mousePosX, int mousePosY)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnMouseMove");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.PushNewTable();

                script.Push("x");
                script.Push(mousePosX);
                script.SetTableValue(-3);

                script.Push("y");
                script.Push(mousePosY);
                script.SetTableValue(-3);

                script.Call(1, 0);
            }
        }
        script.Pop(1);


        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnMouseMove");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Push(mousePosX);
                            script.Push(mousePosY);
                            script.Call(3, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PostEvent_OnMouseWheel(GT::Script &script, int mousePosX, int mousePosY, int delta)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnMouseWheel");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.PushNewTable();

                script.Push("x");
                script.Push(mousePosX);
                script.SetTableValue(-3);

                script.Push("y");
                script.Push(mousePosY);
                script.SetTableValue(-3);

                script.Push("delta");
                script.Push(delta);
                script.SetTableValue(-3);

                script.Call(1, 0);
            }
        }
        script.Pop(1);


        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnMouseWheel");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Push(mousePosX);
                            script.Push(mousePosY);
                            script.Push(delta);
                            script.Call(4, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PostEvent_OnMouseButtonDown(GT::Script &script, int mousePosX, int mousePosY, GTLib::MouseButton button)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnMouseButtonDown");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.PushNewTable();

                script.Push("x");
                script.Push(mousePosX);
                script.SetTableValue(-3);

                script.Push("y");
                script.Push(mousePosY);
                script.SetTableValue(-3);

                script.Push("button");
                script.Push(button);
                script.SetTableValue(-3);

                script.Call(1, 0);
            }
        }
        script.Pop(1);



        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnMouseButtonDown");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Push(mousePosX);
                            script.Push(mousePosY);
                            script.Push(static_cast<int>(button));
                            script.Call(4, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PostEvent_OnMouseButtonUp(GT::Script &script, int mousePosX, int mousePosY, GTLib::MouseButton button)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnMouseButtonUp");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.PushNewTable();

                script.Push("x");
                script.Push(mousePosX);
                script.SetTableValue(-3);

                script.Push("y");
                script.Push(mousePosY);
                script.SetTableValue(-3);

                script.Push("button");
                script.Push(static_cast<int>(button));
                script.SetTableValue(-3);

                script.Call(1, 0);
            }
        }
        script.Pop(1);



        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnMouseButtonUp");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Push(mousePosX);
                            script.Push(mousePosY);
                            script.Push(static_cast<int>(button));
                            script.Call(4, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PostEvent_OnMouseButtonDoubleClick(GT::Script &script, int mousePosX, int mousePosY, GTLib::MouseButton button)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnMouseButtonDoubleClick");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.PushNewTable();

                script.Push("x");
                script.Push(mousePosX);
                script.SetTableValue(-3);

                script.Push("y");
                script.Push(mousePosY);
                script.SetTableValue(-3);

                script.Push("button");
                script.Push(static_cast<int>(button));
                script.SetTableValue(-3);

                script.Call(1, 0);
            }
        }
        script.Pop(1);



        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnMouseButtonDoubleClick");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Push(mousePosX);
                            script.Push(mousePosY);
                            script.Push(static_cast<int>(button));
                            script.Call(4, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PostEvent_OnKeyPressed(GT::Script &script, GTLib::Key key)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnKeyPressed");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.PushNewTable();

                script.Push("key");
                script.Push(static_cast<int>(key));
                script.SetTableValue(-3);

                script.Call(1, 0);
            }
        }
        script.Pop(1);



        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnKeyPressed");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Push(static_cast<int>(key));
                            script.Call(2, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PostEvent_OnKeyReleased(GT::Script &script, GTLib::Key key)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnKeyReleased");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.PushNewTable();

                script.Push("key");
                script.Push(static_cast<int>(key));
                script.SetTableValue(-3);

                script.Call(1, 0);
            }
        }
        script.Pop(1);



        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnKeyReleased");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Push(static_cast<int>(key));
                            script.Call(2, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PostEvent_OnGamePause(GT::Script &script)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnPause");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.Call(0, 0);
            }
        }
        script.Pop(1);



        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnGamePause");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Call(1, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }

    void PostEvent_OnGameResume(GT::Script &script)
    {
        // Game.
        script.GetGlobal("Game");
        assert(script.IsTable(-1));
        {
            script.Push("OnResume");
            script.GetTableValue(-2);
            assert(script.IsFunction(-1));
            {
                script.Call(0, 0);
            }
        }
        script.Pop(1);



        // Scene Nodes.
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("RegisteredScenes");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                for (script.PushNil(); script.Next(-2); script.Pop(1))
                {
                    assert(script.IsTable(-1));
                    {
                        script.Push("PostSceneNodeEvent_OnGameResume");
                        script.GetTableValue(-2);
                        assert(script.IsFunction(-1));
                        {
                            script.PushValue(-2);       // <-- 'self'
                            script.Call(1, 0);
                        }
                    }
                }
            }
            script.Pop(1);
        }
        script.Pop(1);
    }



    bool LoadScriptDefinition(GT::Script &script, const char* scriptRelativePath, const char* scriptString)
    {
        // We actually want to do this as a text script for now.
        GTLib::Strings::List<char> fullScriptString;
        fullScriptString.Append("GTEngine.__CreateScriptClass = function()");
        fullScriptString.Append("    local self = {}");
        fullScriptString.Append("    "); fullScriptString.Append(scriptString);
        fullScriptString.Append("    return self;");
        fullScriptString.Append("end;");
        fullScriptString.Append("GTEngine.ScriptDefinitions['"); fullScriptString.Append(scriptRelativePath); fullScriptString.Append("'] = GTEngine.__CreateScriptClass();");

        return script.Execute(fullScriptString.c_str());
    }

    void UnloadScriptDefinition(GT::Script &script, const char* scriptRelativePath)
    {
        script.GetGlobal("GTEngine");
        assert(script.IsTable(-1));
        {
            script.Push("ScriptDefinitions");
            script.GetTableValue(-2);
            assert(script.IsTable(-1));
            {
                script.Push(scriptRelativePath);    // Key   - The file path.
                script.PushNil();                   // Value - Lua object, or in this case nil so that it's removed.
                script.SetTableValue(-3);
            }
            script.Pop(1);
        }
        script.Pop(1);
    }


    namespace FFI
    {
        int GetDirectoryContents(Script &script)
        {
            // We want to have everything in alphabetical order. To achieve this, we're going to store the results into
            // a dictionary. We then iterate over the dictionary and add them to the script tables.

            auto directoryName = script.ToString(1);
            if (directoryName != nullptr)
            {
                GTLib::Dictionary<bool> directories;
                GTLib::Dictionary<bool> files;

                GTLib::String query(directoryName);
                query.Append(".*");

                easyvfs_iterator iFile;
                if (easyvfs_begin_iteration(GTEngine::g_EngineContext->GetVFS(), directoryName, &iFile))
                {
                    easyvfs_file_info fi;
                    while (easyvfs_next_iteration(GTEngine::g_EngineContext->GetVFS(), &iFile, &fi))
                    {
                        if ((fi.attributes & EASYVFS_FILE_ATTRIBUTE_DIRECTORY) != 0)
                        {
                            directories.Add(easypath_filename(fi.absolutePath), true);
                        }
                        else
                        {
                            files.Add(easypath_filename(fi.absolutePath), true);
                        }
                    }
                }


                // Now that we have the contents we can add them to the input tables.
                if (script.IsTable(2))  // Directories.
                {
                    for (size_t i = 0; i < directories.count; ++i)
                    {
                        script.SetTableValue(2, i + 1, directories.buffer[i]->key);     // i + 1 because Lua indices are 1 based.
                    }
                }

                if (script.IsTable(3))  // Files.
                {
                    for (size_t i = 0; i < files.count; ++i)
                    {
                        script.SetTableValue(3, i + 1, files.buffer[i]->key);           // i + 1 because Lua indices are 1 based.
                    }
                }
            }

            return 0;
        }


        int ToRelativePath(Script &script)
        {
            auto path = script.ToString(1);
            auto base = script.ToString(2);
                
            char relativePath[EASYVFS_MAX_PATH];
            easypath_to_relative(path, base, relativePath, sizeof(relativePath));
                
            script.Push(relativePath);
            return 1;
        }



        int GetExecutableDirectory(GT::Script &script)
        {
            script.Push(GTEngine::GetExecutableDirectory());
            return 1;
        }

        int GetVersionString(GT::Script &script)
        {
            script.Push(GTEngine::GetVersionString());
            return 1;
        }


        int IsModelFile(GT::Script &script)
        {
            script.Push(GT::IsSupportedModelExtension(script.ToString(1)));
            return 1;
        }

        int IsImageFile(GT::Script &script)
        {
            script.Push(GT::IsSupportedImageExtension(script.ToString(1)));
            return 1;
        }

        int IsSoundFile(GT::Script &script)
        {
            script.Push(GT::IsSupportedSoundExtension(script.ToString(1)));
            return 1;
        }

        int IsSceneFile(GT::Script &script)
        {
            script.Push(GT::IsSupportedSceneExtension(script.ToString(1)));
            return 1;
        }

        int IsPrefabFile(GT::Script &script)
        {
            script.Push(GT::IsSupportedPrefabExtension(script.ToString(1)));
            return 1;
        }

        int IsScriptFile(GT::Script &script)
        {
            script.Push(GT::IsSupportedScriptExtension(script.ToString(1)));
            return 1;
        }

        int IsTextFile(GT::Script &script)
        {
            // There can be any number of text files. Perhaps we should assume that if it's not a resouce file like a model and texture, we should assume a text file?

            const char* extension = easypath_extension(script.ToString(1));

            bool result = GTLib::Strings::Equal<false>(extension, "")       ||
                          GTLib::Strings::Equal<false>(extension, "txt")    ||
                          GTLib::Strings::Equal<false>(extension, "lua")    ||
                          GTLib::Strings::Equal<false>(extension, "cfg")    ||
                          GTLib::Strings::Equal<false>(extension, "xml")    ||
                          GTLib::Strings::Equal<false>(extension, "script") ||
                          GTLib::Strings::Equal<false>(extension, "style");

            script.Push(result);
            return 1;
        }


        int CreatePrefab(GT::Script &script)
        {
            auto absolutePath   = script.ToString(1);
            auto makeRelativeTo = script.ToString(2);
            auto sceneNode      = static_cast<GTEngine::SceneNode*>(script.ToPointer(3));

            if (absolutePath != nullptr && makeRelativeTo != nullptr && sceneNode != nullptr)
            {
                auto prefab = GTEngine::PrefabLibrary::Acquire(absolutePath, makeRelativeTo);
                if (prefab != nullptr)
                {
                    prefab->SetFromSceneNode(*sceneNode);
                    prefab->WriteToFile();

                    GTEngine::PrefabLibrary::Unacquire(prefab);
                }
            }

            return 0;
        }

        int ExecuteFile(GT::Script &script)
        {
            script.Push(GameFFI::GetGame(script).GetScript().ExecuteFile(GTEngine::g_EngineContext->GetVFS(), script.ToString(1)));
            return 1;
        }

        int ExecuteScript(GT::Script &script)
        {
            script.Push(GameFFI::GetGame(script).ExecuteScript(script.ToString(1)));
            return 1;
        }

        int GetLastScriptError(GT::Script &script)
        {
            script.Push(GameFFI::GetGame(script).GetScript().GetLastError());
            return 1;
        }


        int RandomInteger(GT::Script &script)
        {
            script.Push(g_Random.Next(script.ToInteger(1), script.ToInteger(2)));
            return 1;
        }

        int RandomFloat(GT::Script &script)
        {
            script.Push(g_Random.Next(script.ToDouble(1), script.ToDouble(2)));
            return 1;
        }





        namespace IOFFI
        {
            int __GetFileInfo(Script &script)
            {
                easyvfs_file_info info;
                if (easyvfs_get_file_info(GTEngine::g_EngineContext->GetVFS(), script.ToString(1), &info))
                {
                    script.Push(script.ToString(1));
                    script.Push(info.absolutePath);
                    script.Push(static_cast<int>(info.sizeInBytes));            // <-- Erroneous! sizeInBytes is 64-bit, but we're casting down to 32-bit!
                    script.Push(static_cast<int>(info.lastModifiedTime));       // <-- Erroneous! lastModifiedTime is 64-bit, but we're casting down to 32-bit!
                    script.Push((info.attributes & EASYVFS_FILE_ATTRIBUTE_DIRECTORY) != 0);

                    return 5;
                }
                else
                {
                    return 0;
                }
            }

            int GetParentDirectoryPath(Script &script)
            {
                char baseDir[EASYVFS_MAX_PATH];
                easypath_copybasepath(script.ToString(1), baseDir, sizeof(baseDir));

                script.Push(baseDir);
                return 1;
            }

            int GetFileNameFromPath(Script &script)
            {
                script.Push(easypath_filename(script.ToString(1)));
                return 1;
            }

            int GetExtension(Script &script)
            {
                script.Push(easypath_extension(script.ToString(1)));
                return 1;
            }

            int RemoveExtension(Script &script)
            {
                char path[EASYVFS_MAX_PATH];
                easypath_copyandremoveextension(path, sizeof(path), script.ToString(1));

                return 1;
            }

            int FileExists(Script &script)
            {
                script.Push(easyvfs_exists(GTEngine::g_EngineContext->GetVFS(), script.ToString(1)));
                return 1;
            }

            int CreateDirectory(Script &script)
            {
                easyvfs_mkdir_recursive(GTEngine::g_EngineContext->GetVFS(), script.ToString(1));
                return 0;
            }

            int DeleteDirectory(Script &script)
            {
                if (easyvfs_is_existing_directory(GTEngine::g_EngineContext->GetVFS(), script.ToString(1))) {
                    easyvfs_delete_file(GTEngine::g_EngineContext->GetVFS(), script.ToString(1));
                }

                return 0;
            }

            int CreateEmptyFile(Script &script)
            {
                easyvfs_file* pFile = easyvfs_open(GTEngine::g_EngineContext->GetVFS(), script.ToString(1), EASYVFS_WRITE | EASYVFS_CREATE_DIRS, 0);
                if (pFile != nullptr)
                {
                    easyvfs_close(pFile);
                }

                return 0;
            }

            int DeleteFile(Script &script)
            {
                easyvfs_delete_file(GTEngine::g_EngineContext->GetVFS(), script.ToString(1));
                return 0;
            }
        }

            
        namespace TimingFFI
        {
            int GetTimeInSeconds(Script &script)
            {
                script.Push(GTLib::Timing::GetTimeInSeconds());
                return 1;
            }

            int GetTimeInMilliseconds(Script &script)
            {
                script.Push(GTLib::Timing::GetTimeInMilliseconds());
                return 1;
            }
        }


        namespace SystemFFI
        {
            int OpenFileOrURL(Script &script)
            {
                script.Push(GTLib::System::OpenFileOrURL(script.ToString(1)));
                return 1;
            }
        }


        ////////////////////////////////////
        // Serializer

        namespace SerializerFFI
        {
            int WriteInt8(Script &script)
            {
                auto serializer = reinterpret_cast<GTLib::Serializer*>(script.ToPointer(1));
                if (serializer != nullptr)
                {
                    serializer->Write(static_cast<int16_t>(script.ToInteger(2)));
                }

                return 0;
            }

            int WriteInt16(Script &script)
            {
                auto serializer = reinterpret_cast<GTLib::Serializer*>(script.ToPointer(1));
                if (serializer != nullptr)
                {
                    serializer->Write(static_cast<int16_t>(script.ToInteger(2)));
                }

                return 0;
            }

            int WriteInt32(Script &script)
            {
                auto serializer = reinterpret_cast<GTLib::Serializer*>(script.ToPointer(1));
                if (serializer != nullptr)
                {
                    serializer->Write(static_cast<int32_t>(script.ToInteger(2)));
                }

                return 0;
            }

            int WriteFloat32(Script &script)
            {
                auto serializer = reinterpret_cast<GTLib::Serializer*>(script.ToPointer(1));
                if (serializer != nullptr)
                {
                    serializer->Write(script.ToFloat(2));
                }

                return 0;
            }

            int WriteFloat64(Script &script)
            {
                auto serializer = reinterpret_cast<GTLib::Serializer*>(script.ToPointer(1));
                if (serializer != nullptr)
                {
                    serializer->Write(script.ToDouble(2));
                }

                return 0;
            }

            int WriteBool(Script &script)
            {
                auto serializer = reinterpret_cast<GTLib::Serializer*>(script.ToPointer(1));
                if (serializer != nullptr)
                {
                    serializer->Write(script.ToBoolean(2));
                }

                return 0;
            }

            int WriteString(Script &script)
            {
                auto serializer = reinterpret_cast<GTLib::Serializer*>(script.ToPointer(1));
                if (serializer != nullptr)
                {
                    serializer->WriteString(script.ToString(2));
                }

                return 0;
            }
        }


        ////////////////////////////////////
        // Deserializer

        namespace DeserializerFFI
        {
            int CreateFromFile(Script &script)
            {
                easyvfs_file* pFile = easyvfs_open(GTEngine::g_EngineContext->GetVFS(), script.ToString(1), EASYVFS_READ, 0);
                if (pFile != nullptr)
                {
                    auto deserializer = new GTLib::FileDeserializer(pFile);

                    script.Push(deserializer);
                    script.Push(reinterpret_cast<void*>(pFile));

                    return 2;
                }

                return 0;
            }

            int DeleteFromFile(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                auto file         = reinterpret_cast<easyvfs_file*>(script.ToPointer(2));

                easyvfs_close(file);
                delete deserializer;

                return 0;
            }

            int ReadInt8(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    int8_t value;
                    deserializer->Read(value);

                    script.Push(static_cast<int>(value));
                }
                else
                {
                    script.PushNil();
                }

                return 1;
            }

            int ReadInt16(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    int16_t value;
                    deserializer->Read(value);

                    script.Push(static_cast<int>(value));
                }
                else
                {
                    script.PushNil();
                }

                return 1;
            }

            int ReadInt32(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    int32_t value;
                    deserializer->Read(value);

                    script.Push(static_cast<int>(value));
                }
                else
                {
                    script.PushNil();
                }

                return 1;
            }

            int ReadFloat32(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    float value;
                    deserializer->Read(value);

                    script.Push(value);
                }
                else
                {
                    script.PushNil();
                }

                return 1;
            }

            int ReadFloat64(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    double value;
                    deserializer->Read(value);

                    script.Push(value);
                }
                else
                {
                    script.PushNil();
                }

                return 1;
            }

            int ReadBool(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    bool value;
                    deserializer->Read(value);

                    script.Push(value);
                }
                else
                {
                    script.PushNil();
                }

                return 1;
            }

            int ReadString(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    GTLib::String value;
                    deserializer->ReadString(value);

                    script.Push(value.c_str());
                }
                else
                {
                    script.PushNil();
                }

                return 1;
            }


            int StartChunk(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    deserializer->StartChunk(script.ToInteger(2));
                }

                return 0;
            }

            int EndChunk(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    deserializer->EndChunk();
                }

                return 0;
            }

            int HasRoomInChunk(Script &script)
            {
                auto deserializer = reinterpret_cast<GTLib::Deserializer*>(script.ToPointer(1));
                if (deserializer != nullptr)
                {
                    deserializer->HasRoomInChunk(script.ToInteger(2));
                }

                return 0;
            }
        }


        namespace DebuggingFFI
        {
            int Breakpoint(Script &)
            {
                return 0;
            }

            int PrintCallStack(Script &script)
            {
                lua_State* state = reinterpret_cast<lua_State*>(script.GetInernalLuaState());
                lua_Debug  entry;
                int        depth = 0;

                while (lua_getstack(state, depth, &entry))
                {
                    int status = lua_getinfo(state, "Sln", &entry);
                    assert(status != 0);
                    {
                        (void)status;   // <-- Warning silencer for release builds.

                        printf("%s(%d): %s\n", entry.short_src, entry.currentline, entry.name ? entry.name : "?");
                        ++depth;
                    }
                }

                return 0;
            }
        }
    }
}
